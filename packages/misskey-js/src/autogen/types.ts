/* eslint @typescript-eslint/naming-convention: 0 */
/* eslint @typescript-eslint/no-explicit-any: 0 */

export type paths = {
    '/admin/abuse-report/notification-recipient/create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/abuse-report/notification-recipient/create
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes* / **Permission**: *write:admin:abuse-report:notification-recipient*
         */
        post: operations['admin___abuse-report___notification-recipient___create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/abuse-report/notification-recipient/delete': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/abuse-report/notification-recipient/delete
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes* / **Permission**: *write:admin:abuse-report:notification-recipient*
         */
        post: operations['admin___abuse-report___notification-recipient___delete'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/abuse-report/notification-recipient/list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/abuse-report/notification-recipient/list
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes* / **Permission**: *read:admin:abuse-report:notification-recipient*
         */
        post: operations['admin___abuse-report___notification-recipient___list'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/abuse-report/notification-recipient/show': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/abuse-report/notification-recipient/show
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes* / **Permission**: *read:admin:abuse-report:notification-recipient*
         */
        post: operations['admin___abuse-report___notification-recipient___show'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/abuse-report/notification-recipient/update': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/abuse-report/notification-recipient/update
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes* / **Permission**: *write:admin:abuse-report:notification-recipient*
         */
        post: operations['admin___abuse-report___notification-recipient___update'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/abuse-user-reports': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/abuse-user-reports
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:admin:abuse-user-reports*
         */
        post: operations['admin___abuse-user-reports'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/accounts/create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/accounts/create
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['admin___accounts___create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/accounts/delete': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/accounts/delete
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:account*
         */
        post: operations['admin___accounts___delete'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/accounts/find-by-email': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/accounts/find-by-email
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:admin:account*
         */
        post: operations['admin___accounts___find-by-email'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/ad/create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/ad/create
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:ad*
         */
        post: operations['admin___ad___create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/ad/delete': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/ad/delete
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:ad*
         */
        post: operations['admin___ad___delete'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/ad/list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/ad/list
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:admin:ad*
         */
        post: operations['admin___ad___list'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/ad/update': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/ad/update
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:ad*
         */
        post: operations['admin___ad___update'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/announcements/create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/announcements/create
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:announcements*
         */
        post: operations['admin___announcements___create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/announcements/delete': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/announcements/delete
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:announcements*
         */
        post: operations['admin___announcements___delete'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/announcements/list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/announcements/list
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:admin:announcements*
         */
        post: operations['admin___announcements___list'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/announcements/update': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/announcements/update
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:announcements*
         */
        post: operations['admin___announcements___update'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/approve-user': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/approve-user
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes* / **Permission**: *write:admin:approve-account*
         */
        post: operations['admin___approve-user'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/avatar-decorations/create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/avatar-decorations/create
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:avatar-decorations*
         */
        post: operations['admin___avatar-decorations___create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/avatar-decorations/delete': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/avatar-decorations/delete
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:avatar-decorations*
         */
        post: operations['admin___avatar-decorations___delete'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/avatar-decorations/list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/avatar-decorations/list
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:admin:avatar-decorations*
         */
        post: operations['admin___avatar-decorations___list'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/avatar-decorations/update': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/avatar-decorations/update
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:avatar-decorations*
         */
        post: operations['admin___avatar-decorations___update'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/captcha/current': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/captcha/current
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:admin:meta*
         */
        post: operations['admin___captcha___current'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/captcha/save': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/captcha/save
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:meta*
         */
        post: operations['admin___captcha___save'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/delete-account': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/delete-account
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:delete-account*
         */
        post: operations['admin___delete-account'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/delete-all-files-of-a-user': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/delete-all-files-of-a-user
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:delete-all-files-of-a-user*
         */
        post: operations['admin___delete-all-files-of-a-user'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/drive/clean-remote-files': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/drive/clean-remote-files
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:drive*
         */
        post: operations['admin___drive___clean-remote-files'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/drive/cleanup': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/drive/cleanup
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:drive*
         */
        post: operations['admin___drive___cleanup'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/drive/files': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/drive/files
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:admin:drive*
         */
        post: operations['admin___drive___files'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/drive/show-file': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/drive/show-file
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:admin:drive*
         */
        post: operations['admin___drive___show-file'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/emoji/add': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/emoji/add
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:emoji*
         */
        post: operations['admin___emoji___add'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/emoji/add-aliases-bulk': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/emoji/add-aliases-bulk
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:emoji*
         */
        post: operations['admin___emoji___add-aliases-bulk'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/emoji/copy': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/emoji/copy
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:emoji*
         */
        post: operations['admin___emoji___copy'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/emoji/delete': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/emoji/delete
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:emoji*
         */
        post: operations['admin___emoji___delete'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/emoji/delete-bulk': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/emoji/delete-bulk
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:emoji*
         */
        post: operations['admin___emoji___delete-bulk'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/emoji/import-zip': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/emoji/import-zip
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes*
         */
        post: operations['admin___emoji___import-zip'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/emoji/list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/emoji/list
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:admin:emoji*
         */
        post: operations['admin___emoji___list'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/emoji/list-remote': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/emoji/list-remote
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:admin:emoji*
         */
        post: operations['admin___emoji___list-remote'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/emoji/remove-aliases-bulk': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/emoji/remove-aliases-bulk
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:emoji*
         */
        post: operations['admin___emoji___remove-aliases-bulk'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/emoji/set-aliases-bulk': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/emoji/set-aliases-bulk
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:emoji*
         */
        post: operations['admin___emoji___set-aliases-bulk'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/emoji/set-category-bulk': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/emoji/set-category-bulk
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:emoji*
         */
        post: operations['admin___emoji___set-category-bulk'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/emoji/set-license-bulk': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/emoji/set-license-bulk
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:emoji*
         */
        post: operations['admin___emoji___set-license-bulk'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/emoji/update': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/emoji/update
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:emoji*
         */
        post: operations['admin___emoji___update'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/federation/delete-all-files': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/federation/delete-all-files
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:federation*
         */
        post: operations['admin___federation___delete-all-files'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/federation/refresh-remote-instance-metadata': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/federation/refresh-remote-instance-metadata
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:federation*
         */
        post: operations['admin___federation___refresh-remote-instance-metadata'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/federation/remove-all-following': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/federation/remove-all-following
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:federation*
         */
        post: operations['admin___federation___remove-all-following'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/federation/update-instance': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/federation/update-instance
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:federation*
         */
        post: operations['admin___federation___update-instance'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/forward-abuse-user-report': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/forward-abuse-user-report
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:resolve-abuse-user-report*
         */
        post: operations['admin___forward-abuse-user-report'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/get-index-stats': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/get-index-stats
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:admin:index-stats*
         */
        post: operations['admin___get-index-stats'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/get-table-stats': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/get-table-stats
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:admin:table-stats*
         */
        post: operations['admin___get-table-stats'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/get-user-ips': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/get-user-ips
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:admin:user-ips*
         */
        post: operations['admin___get-user-ips'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/invite/create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/invite/create
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:invite-codes*
         */
        post: operations['admin___invite___create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/invite/list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/invite/list
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:admin:invite-codes*
         */
        post: operations['admin___invite___list'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/meta': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/meta
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:admin:meta*
         */
        post: operations['admin___meta'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/promo/create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/promo/create
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:promo*
         */
        post: operations['admin___promo___create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/queue/clear': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/queue/clear
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:queue*
         */
        post: operations['admin___queue___clear'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/queue/deliver-delayed': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/queue/deliver-delayed
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:admin:queue*
         */
        post: operations['admin___queue___deliver-delayed'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/queue/inbox-delayed': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/queue/inbox-delayed
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:admin:queue*
         */
        post: operations['admin___queue___inbox-delayed'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/queue/jobs': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/queue/jobs
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:admin:queue*
         */
        post: operations['admin___queue___jobs'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/queue/promote-jobs': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/queue/promote-jobs
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:queue*
         */
        post: operations['admin___queue___promote-jobs'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/queue/queue-stats': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/queue/queue-stats
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:admin:queue*
         */
        post: operations['admin___queue___queue-stats'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/queue/queues': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/queue/queues
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:admin:queue*
         */
        post: operations['admin___queue___queues'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/queue/remove-job': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/queue/remove-job
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:queue*
         */
        post: operations['admin___queue___remove-job'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/queue/retry-job': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/queue/retry-job
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:queue*
         */
        post: operations['admin___queue___retry-job'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/queue/show-job': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/queue/show-job
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:admin:queue*
         */
        post: operations['admin___queue___show-job'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/queue/stats': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/queue/stats
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:admin:emoji*
         */
        post: operations['admin___queue___stats'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/relays/add': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/relays/add
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:relays*
         */
        post: operations['admin___relays___add'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/relays/list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/relays/list
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:admin:relays*
         */
        post: operations['admin___relays___list'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/relays/remove': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/relays/remove
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:relays*
         */
        post: operations['admin___relays___remove'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/reset-password': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/reset-password
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:reset-password*
         */
        post: operations['admin___reset-password'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/resolve-abuse-user-report': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/resolve-abuse-user-report
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:resolve-abuse-user-report*
         */
        post: operations['admin___resolve-abuse-user-report'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/roles/assign': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/roles/assign
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:roles*
         */
        post: operations['admin___roles___assign'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/roles/create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/roles/create
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:roles*
         */
        post: operations['admin___roles___create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/roles/delete': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/roles/delete
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:roles*
         */
        post: operations['admin___roles___delete'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/roles/list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/roles/list
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:admin:roles*
         */
        post: operations['admin___roles___list'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/roles/show': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/roles/show
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:admin:roles*
         */
        post: operations['admin___roles___show'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/roles/unassign': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/roles/unassign
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:roles*
         */
        post: operations['admin___roles___unassign'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/roles/update': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/roles/update
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:roles*
         */
        post: operations['admin___roles___update'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/roles/update-default-policies': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/roles/update-default-policies
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:roles*
         */
        post: operations['admin___roles___update-default-policies'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/roles/users': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/roles/users
         * @description No description provided.
         *
         *     **Credential required**: *No* / **Permission**: *read:admin:roles*
         */
        post: operations['admin___roles___users'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/send-email': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/send-email
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:send-email*
         */
        post: operations['admin___send-email'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/server-info': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/server-info
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:admin:server-info*
         */
        post: operations['admin___server-info'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/show-moderation-logs': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/show-moderation-logs
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:admin:show-moderation-log*
         */
        post: operations['admin___show-moderation-logs'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/show-user': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/show-user
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:admin:show-user*
         */
        post: operations['admin___show-user'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/show-users': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/show-users
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:admin:show-user*
         */
        post: operations['admin___show-users'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/suspend-user': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/suspend-user
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:suspend-user*
         */
        post: operations['admin___suspend-user'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/system-webhook/create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/system-webhook/create
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes* / **Permission**: *write:admin:system-webhook*
         */
        post: operations['admin___system-webhook___create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/system-webhook/delete': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/system-webhook/delete
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes* / **Permission**: *write:admin:system-webhook*
         */
        post: operations['admin___system-webhook___delete'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/system-webhook/list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/system-webhook/list
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes* / **Permission**: *write:admin:system-webhook*
         */
        post: operations['admin___system-webhook___list'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/system-webhook/show': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/system-webhook/show
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes* / **Permission**: *write:admin:system-webhook*
         */
        post: operations['admin___system-webhook___show'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/system-webhook/test': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/system-webhook/test
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes* / **Permission**: *read:admin:system-webhook*
         */
        post: operations['admin___system-webhook___test'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/system-webhook/update': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/system-webhook/update
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes* / **Permission**: *write:admin:system-webhook*
         */
        post: operations['admin___system-webhook___update'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/unset-user-avatar': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/unset-user-avatar
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:unset-user-avatar*
         */
        post: operations['admin___unset-user-avatar'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/unset-user-banner': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/unset-user-banner
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:unset-user-banner*
         */
        post: operations['admin___unset-user-banner'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/unsuspend-user': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/unsuspend-user
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:unsuspend-user*
         */
        post: operations['admin___unsuspend-user'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/update-abuse-user-report': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/update-abuse-user-report
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:resolve-abuse-user-report*
         */
        post: operations['admin___update-abuse-user-report'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/update-meta': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/update-meta
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:meta*
         */
        post: operations['admin___update-meta'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/update-proxy-account': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/update-proxy-account
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:account*
         */
        post: operations['admin___update-proxy-account'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/update-user-note': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * admin/update-user-note
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:admin:user-note*
         */
        post: operations['admin___update-user-note'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/announcements': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * announcements
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['announcements'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/announcements/show': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * announcements/show
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['announcements___show'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/antennas/create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * antennas/create
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:account*
         */
        post: operations['antennas___create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/antennas/delete': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * antennas/delete
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:account*
         */
        post: operations['antennas___delete'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/antennas/list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * antennas/list
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:account*
         */
        post: operations['antennas___list'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/antennas/notes': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * antennas/notes
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:account*
         */
        post: operations['antennas___notes'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/antennas/show': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * antennas/show
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:account*
         */
        post: operations['antennas___show'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/antennas/update': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * antennas/update
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:account*
         */
        post: operations['antennas___update'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/ap/get': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * ap/get
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:federation*
         */
        post: operations['ap___get'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/ap/show': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * ap/show
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:account*
         */
        post: operations['ap___show'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/app/create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * app/create
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['app___create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/app/show': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * app/show
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['app___show'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/auth/accept': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * auth/accept
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes*
         */
        post: operations['auth___accept'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/auth/session/generate': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * auth/session/generate
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['auth___session___generate'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/auth/session/show': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * auth/session/show
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['auth___session___show'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/auth/session/userkey': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * auth/session/userkey
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['auth___session___userkey'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/blocking/create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * blocking/create
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:blocks*
         */
        post: operations['blocking___create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/blocking/delete': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * blocking/delete
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:blocks*
         */
        post: operations['blocking___delete'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/blocking/list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * blocking/list
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:blocks*
         */
        post: operations['blocking___list'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bubble-game/ranking': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * bubble-game/ranking
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['bubble-game___ranking'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bubble-game/register': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * bubble-game/register
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:account*
         */
        post: operations['bubble-game___register'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/channels/create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * channels/create
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:channels*
         */
        post: operations['channels___create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/channels/favorite': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * channels/favorite
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:channels*
         */
        post: operations['channels___favorite'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/channels/featured': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * channels/featured
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['channels___featured'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/channels/follow': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * channels/follow
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:channels*
         */
        post: operations['channels___follow'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/channels/followed': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * channels/followed
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:channels*
         */
        post: operations['channels___followed'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/channels/followers': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * channels/followers
         * @description No description provided.
         *
         *     **Credential required**: *Yes*
         */
        post: operations['channels___followers'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/channels/my-favorites': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * channels/my-favorites
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:channels*
         */
        post: operations['channels___my-favorites'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/channels/owned': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * channels/owned
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:channels*
         */
        post: operations['channels___owned'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/channels/search': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * channels/search
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['channels___search'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/channels/show': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * channels/show
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['channels___show'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/channels/timeline': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * channels/timeline
         * @description No description provided.
         *
         *     **Credential required**: *Yes*
         */
        post: operations['channels___timeline'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/channels/unfavorite': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * channels/unfavorite
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:channels*
         */
        post: operations['channels___unfavorite'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/channels/unfollow': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * channels/unfollow
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:channels*
         */
        post: operations['channels___unfollow'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/channels/update': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * channels/update
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:channels*
         */
        post: operations['channels___update'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/charts/active-users': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * charts/active-users
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['charts___active-users'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/charts/ap-request': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * charts/ap-request
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['charts___ap-request'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/charts/drive': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * charts/drive
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['charts___drive'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/charts/federation': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * charts/federation
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['charts___federation'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/charts/instance': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * charts/instance
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['charts___instance'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/charts/notes': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * charts/notes
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['charts___notes'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/charts/user/drive': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * charts/user/drive
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['charts___user___drive'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/charts/user/following': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * charts/user/following
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['charts___user___following'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/charts/user/notes': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * charts/user/notes
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['charts___user___notes'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/charts/user/pv': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * charts/user/pv
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['charts___user___pv'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/charts/user/reactions': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * charts/user/reactions
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['charts___user___reactions'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/charts/users': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * charts/users
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['charts___users'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/chat/history': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * chat/history
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:chat*
         */
        post: operations['chat___history'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/chat/messages/create-to-room': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * chat/messages/create-to-room
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:chat*
         */
        post: operations['chat___messages___create-to-room'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/chat/messages/create-to-user': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * chat/messages/create-to-user
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:chat*
         */
        post: operations['chat___messages___create-to-user'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/chat/messages/delete': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * chat/messages/delete
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:chat*
         */
        post: operations['chat___messages___delete'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/chat/messages/react': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * chat/messages/react
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:chat*
         */
        post: operations['chat___messages___react'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/chat/messages/room-timeline': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * chat/messages/room-timeline
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:chat*
         */
        post: operations['chat___messages___room-timeline'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/chat/messages/search': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * chat/messages/search
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:chat*
         */
        post: operations['chat___messages___search'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/chat/messages/show': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * chat/messages/show
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:chat*
         */
        post: operations['chat___messages___show'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/chat/messages/unreact': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * chat/messages/unreact
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:chat*
         */
        post: operations['chat___messages___unreact'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/chat/messages/user-timeline': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * chat/messages/user-timeline
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:chat*
         */
        post: operations['chat___messages___user-timeline'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/chat/read-all': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * chat/read-all
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:chat*
         */
        post: operations['chat___read-all'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/chat/rooms/create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * chat/rooms/create
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:chat*
         */
        post: operations['chat___rooms___create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/chat/rooms/delete': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * chat/rooms/delete
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:chat*
         */
        post: operations['chat___rooms___delete'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/chat/rooms/invitations/create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * chat/rooms/invitations/create
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:chat*
         */
        post: operations['chat___rooms___invitations___create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/chat/rooms/invitations/ignore': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * chat/rooms/invitations/ignore
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:chat*
         */
        post: operations['chat___rooms___invitations___ignore'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/chat/rooms/invitations/inbox': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * chat/rooms/invitations/inbox
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:chat*
         */
        post: operations['chat___rooms___invitations___inbox'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/chat/rooms/invitations/outbox': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * chat/rooms/invitations/outbox
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:chat*
         */
        post: operations['chat___rooms___invitations___outbox'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/chat/rooms/join': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * chat/rooms/join
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:chat*
         */
        post: operations['chat___rooms___join'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/chat/rooms/joining': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * chat/rooms/joining
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:chat*
         */
        post: operations['chat___rooms___joining'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/chat/rooms/leave': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * chat/rooms/leave
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:chat*
         */
        post: operations['chat___rooms___leave'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/chat/rooms/members': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * chat/rooms/members
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:chat*
         */
        post: operations['chat___rooms___members'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/chat/rooms/mute': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * chat/rooms/mute
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:chat*
         */
        post: operations['chat___rooms___mute'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/chat/rooms/owned': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * chat/rooms/owned
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:chat*
         */
        post: operations['chat___rooms___owned'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/chat/rooms/show': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * chat/rooms/show
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:chat*
         */
        post: operations['chat___rooms___show'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/chat/rooms/update': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * chat/rooms/update
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:chat*
         */
        post: operations['chat___rooms___update'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/clips/add-note': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * clips/add-note
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:account*
         */
        post: operations['clips___add-note'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/clips/create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * clips/create
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:account*
         */
        post: operations['clips___create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/clips/delete': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * clips/delete
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:account*
         */
        post: operations['clips___delete'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/clips/favorite': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * clips/favorite
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:clip-favorite*
         */
        post: operations['clips___favorite'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/clips/list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * clips/list
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:account*
         */
        post: operations['clips___list'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/clips/my-favorites': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * clips/my-favorites
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:clip-favorite*
         */
        post: operations['clips___my-favorites'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/clips/notes': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * clips/notes
         * @description No description provided.
         *
         *     **Credential required**: *No* / **Permission**: *read:account*
         */
        post: operations['clips___notes'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/clips/remove-note': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * clips/remove-note
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:account*
         */
        post: operations['clips___remove-note'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/clips/show': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * clips/show
         * @description No description provided.
         *
         *     **Credential required**: *No* / **Permission**: *read:account*
         */
        post: operations['clips___show'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/clips/unfavorite': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * clips/unfavorite
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:clip-favorite*
         */
        post: operations['clips___unfavorite'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/clips/update': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * clips/update
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:account*
         */
        post: operations['clips___update'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * drive
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:drive*
         */
        post: operations['drive'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/files': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * drive/files
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:drive*
         */
        post: operations['drive___files'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/files/attached-notes': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * drive/files/attached-notes
         * @description Find the notes to which the given file is attached.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:drive*
         */
        post: operations['drive___files___attached-notes'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/files/check-existence': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * drive/files/check-existence
         * @description Check if a given file exists.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:drive*
         */
        post: operations['drive___files___check-existence'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/files/create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * drive/files/create
         * @description Upload a new drive file.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:drive*
         */
        post: operations['drive___files___create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/files/delete': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * drive/files/delete
         * @description Delete an existing drive file.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:drive*
         */
        post: operations['drive___files___delete'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/files/find': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * drive/files/find
         * @description Search for a drive file by the given parameters.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:drive*
         */
        post: operations['drive___files___find'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/files/find-by-hash': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * drive/files/find-by-hash
         * @description Search for a drive file by a hash of the contents.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:drive*
         */
        post: operations['drive___files___find-by-hash'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/files/move-bulk': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * drive/files/move-bulk
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:drive*
         */
        post: operations['drive___files___move-bulk'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/files/show': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * drive/files/show
         * @description Show the properties of a drive file.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:drive*
         */
        post: operations['drive___files___show'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/files/update': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * drive/files/update
         * @description Update the properties of a drive file.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:drive*
         */
        post: operations['drive___files___update'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/files/upload-from-url': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * drive/files/upload-from-url
         * @description Request the server to download a new drive file from the specified URL.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:drive*
         */
        post: operations['drive___files___upload-from-url'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/folders': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * drive/folders
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:drive*
         */
        post: operations['drive___folders'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/folders/create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * drive/folders/create
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:drive*
         */
        post: operations['drive___folders___create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/folders/delete': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * drive/folders/delete
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:drive*
         */
        post: operations['drive___folders___delete'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/folders/find': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * drive/folders/find
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:drive*
         */
        post: operations['drive___folders___find'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/folders/show': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * drive/folders/show
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:drive*
         */
        post: operations['drive___folders___show'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/folders/update': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * drive/folders/update
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:drive*
         */
        post: operations['drive___folders___update'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/stream': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * drive/stream
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:drive*
         */
        post: operations['drive___stream'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/email-address/available': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * email-address/available
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['email-address___available'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/emoji': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * emoji
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['emoji'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/emojis': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * emojis
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['emojis'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/endpoint': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * endpoint
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['endpoint'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/endpoints': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * endpoints
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['endpoints'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/export-custom-emojis': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * export-custom-emojis
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes*
         */
        post: operations['export-custom-emojis'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/federation/followers': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * federation/followers
         * @description No description provided.
         *
         *     **Credential required**: *Yes*
         */
        post: operations['federation___followers'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/federation/following': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * federation/following
         * @description No description provided.
         *
         *     **Credential required**: *Yes*
         */
        post: operations['federation___following'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/federation/instances': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * federation/instances
         * @description No description provided.
         *
         *     **Credential required**: *Yes*
         */
        post: operations['federation___instances'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/federation/show-instance': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * federation/show-instance
         * @description No description provided.
         *
         *     **Credential required**: *Yes*
         */
        post: operations['federation___show-instance'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/federation/stats': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * federation/stats
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['federation___stats'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/federation/update-remote-user': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * federation/update-remote-user
         * @description No description provided.
         *
         *     **Credential required**: *Yes*
         */
        post: operations['federation___update-remote-user'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/federation/users': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * federation/users
         * @description No description provided.
         *
         *     **Credential required**: *Yes*
         */
        post: operations['federation___users'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/fetch-external-resources': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * fetch-external-resources
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes*
         */
        post: operations['fetch-external-resources'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/fetch-rss': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * fetch-rss
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['fetch-rss'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/flash/create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * flash/create
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:flash*
         */
        post: operations['flash___create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/flash/delete': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * flash/delete
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:flash*
         */
        post: operations['flash___delete'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/flash/featured': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * flash/featured
         * @description No description provided.
         *
         *     **Credential required**: *Yes*
         */
        post: operations['flash___featured'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/flash/like': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * flash/like
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:flash-likes*
         */
        post: operations['flash___like'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/flash/my': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * flash/my
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:flash*
         */
        post: operations['flash___my'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/flash/my-likes': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * flash/my-likes
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:flash-likes*
         */
        post: operations['flash___my-likes'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/flash/show': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * flash/show
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['flash___show'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/flash/unlike': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * flash/unlike
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:flash-likes*
         */
        post: operations['flash___unlike'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/flash/update': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * flash/update
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:flash*
         */
        post: operations['flash___update'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/following/create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * following/create
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:following*
         */
        post: operations['following___create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/following/delete': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * following/delete
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:following*
         */
        post: operations['following___delete'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/following/invalidate': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * following/invalidate
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:following*
         */
        post: operations['following___invalidate'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/following/requests/accept': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * following/requests/accept
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:following*
         */
        post: operations['following___requests___accept'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/following/requests/cancel': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * following/requests/cancel
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:following*
         */
        post: operations['following___requests___cancel'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/following/requests/list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * following/requests/list
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:following*
         */
        post: operations['following___requests___list'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/following/requests/reject': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * following/requests/reject
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:following*
         */
        post: operations['following___requests___reject'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/following/requests/sent': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * following/requests/sent
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:following*
         */
        post: operations['following___requests___sent'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/following/update': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * following/update
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:following*
         */
        post: operations['following___update'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/following/update-all': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * following/update-all
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:following*
         */
        post: operations['following___update-all'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/gallery/featured': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * gallery/featured
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['gallery___featured'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/gallery/popular': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * gallery/popular
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['gallery___popular'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/gallery/posts': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * gallery/posts
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['gallery___posts'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/gallery/posts/create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * gallery/posts/create
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:gallery*
         */
        post: operations['gallery___posts___create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/gallery/posts/delete': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * gallery/posts/delete
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:gallery*
         */
        post: operations['gallery___posts___delete'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/gallery/posts/like': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * gallery/posts/like
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:gallery-likes*
         */
        post: operations['gallery___posts___like'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/gallery/posts/show': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * gallery/posts/show
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['gallery___posts___show'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/gallery/posts/unlike': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * gallery/posts/unlike
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:gallery-likes*
         */
        post: operations['gallery___posts___unlike'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/gallery/posts/update': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * gallery/posts/update
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:gallery*
         */
        post: operations['gallery___posts___update'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/get-avatar-decorations': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * get-avatar-decorations
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['get-avatar-decorations'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/get-online-users-count': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * get-online-users-count
         * @description No description provided.
         *
         *     **Credential required**: *No* / **Permission**: *read:account*
         */
        post: operations['get-online-users-count'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/hashtags/list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * hashtags/list
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['hashtags___list'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/hashtags/search': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * hashtags/search
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['hashtags___search'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/hashtags/show': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * hashtags/show
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['hashtags___show'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/hashtags/trend': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * hashtags/trend
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['hashtags___trend'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/hashtags/users': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * hashtags/users
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['hashtags___users'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:account*
         */
        post: operations['i'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/2fa/done': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/2fa/done
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes*
         */
        post: operations['i___2fa___done'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/2fa/key-done': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/2fa/key-done
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes*
         */
        post: operations['i___2fa___key-done'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/2fa/password-less': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/2fa/password-less
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes*
         */
        post: operations['i___2fa___password-less'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/2fa/register': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/2fa/register
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes*
         */
        post: operations['i___2fa___register'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/2fa/register-key': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/2fa/register-key
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes*
         */
        post: operations['i___2fa___register-key'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/2fa/remove-key': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/2fa/remove-key
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes*
         */
        post: operations['i___2fa___remove-key'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/2fa/unregister': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/2fa/unregister
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes*
         */
        post: operations['i___2fa___unregister'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/2fa/update-key': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/2fa/update-key
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes*
         */
        post: operations['i___2fa___update-key'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/apps': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/apps
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes*
         */
        post: operations['i___apps'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/authorized-apps': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/authorized-apps
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes*
         */
        post: operations['i___authorized-apps'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/change-password': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/change-password
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes*
         */
        post: operations['i___change-password'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/claim-achievement': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/claim-achievement
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:account*
         */
        post: operations['i___claim-achievement'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/delete-account': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/delete-account
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes*
         */
        post: operations['i___delete-account'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/export-antennas': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/export-antennas
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes*
         */
        post: operations['i___export-antennas'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/export-blocking': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/export-blocking
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes*
         */
        post: operations['i___export-blocking'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/export-clips': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/export-clips
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes*
         */
        post: operations['i___export-clips'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/export-favorites': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/export-favorites
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes*
         */
        post: operations['i___export-favorites'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/export-following': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/export-following
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes*
         */
        post: operations['i___export-following'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/export-mute': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/export-mute
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes*
         */
        post: operations['i___export-mute'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/export-notes': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/export-notes
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes*
         */
        post: operations['i___export-notes'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/export-user-lists': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/export-user-lists
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes*
         */
        post: operations['i___export-user-lists'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/favorites': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/favorites
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:favorites*
         */
        post: operations['i___favorites'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/gallery/likes': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/gallery/likes
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:gallery-likes*
         */
        post: operations['i___gallery___likes'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/gallery/posts': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/gallery/posts
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:gallery*
         */
        post: operations['i___gallery___posts'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/import-antennas': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/import-antennas
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes*
         */
        post: operations['i___import-antennas'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/import-blocking': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/import-blocking
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes*
         */
        post: operations['i___import-blocking'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/import-following': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/import-following
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes*
         */
        post: operations['i___import-following'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/import-muting': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/import-muting
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes*
         */
        post: operations['i___import-muting'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/import-user-lists': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/import-user-lists
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes*
         */
        post: operations['i___import-user-lists'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/move': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/move
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes*
         */
        post: operations['i___move'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/notifications': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/notifications
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:notifications*
         */
        post: operations['i___notifications'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/notifications-grouped': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/notifications-grouped
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:notifications*
         */
        post: operations['i___notifications-grouped'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/page-likes': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/page-likes
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:page-likes*
         */
        post: operations['i___page-likes'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/pages': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/pages
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:pages*
         */
        post: operations['i___pages'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/pin': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/pin
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:account*
         */
        post: operations['i___pin'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/read-announcement': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/read-announcement
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:account*
         */
        post: operations['i___read-announcement'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/regenerate-token': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/regenerate-token
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes*
         */
        post: operations['i___regenerate-token'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/registry/get': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/registry/get
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:account*
         */
        post: operations['i___registry___get'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/registry/get-all': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/registry/get-all
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:account*
         */
        post: operations['i___registry___get-all'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/registry/get-detail': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/registry/get-detail
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:account*
         */
        post: operations['i___registry___get-detail'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/registry/keys': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/registry/keys
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:account*
         */
        post: operations['i___registry___keys'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/registry/keys-with-type': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/registry/keys-with-type
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:account*
         */
        post: operations['i___registry___keys-with-type'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/registry/remove': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/registry/remove
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:account*
         */
        post: operations['i___registry___remove'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/registry/scopes-with-domain': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/registry/scopes-with-domain
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes*
         */
        post: operations['i___registry___scopes-with-domain'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/registry/set': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/registry/set
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:account*
         */
        post: operations['i___registry___set'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/revoke-token': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/revoke-token
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes*
         */
        post: operations['i___revoke-token'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/signin-history': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/signin-history
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes*
         */
        post: operations['i___signin-history'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/unpin': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/unpin
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:account*
         */
        post: operations['i___unpin'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/update': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/update
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:account*
         */
        post: operations['i___update'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/update-email': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/update-email
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes*
         */
        post: operations['i___update-email'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/webhooks/create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/webhooks/create
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:account*
         */
        post: operations['i___webhooks___create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/webhooks/delete': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/webhooks/delete
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:account*
         */
        post: operations['i___webhooks___delete'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/webhooks/list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/webhooks/list
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:account*
         */
        post: operations['i___webhooks___list'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/webhooks/show': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/webhooks/show
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:account*
         */
        post: operations['i___webhooks___show'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/webhooks/test': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/webhooks/test
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes* / **Permission**: *read:account*
         */
        post: operations['i___webhooks___test'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/i/webhooks/update': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * i/webhooks/update
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:account*
         */
        post: operations['i___webhooks___update'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/invite/create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * invite/create
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:invite-codes*
         */
        post: operations['invite___create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/invite/delete': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * invite/delete
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:invite-codes*
         */
        post: operations['invite___delete'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/invite/limit': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * invite/limit
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:invite-codes*
         */
        post: operations['invite___limit'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/invite/list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * invite/list
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:invite-codes*
         */
        post: operations['invite___list'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/meta': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * meta
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['meta'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/miauth/gen-token': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * miauth/gen-token
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes*
         */
        post: operations['miauth___gen-token'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/mute/create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * mute/create
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:mutes*
         */
        post: operations['mute___create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/mute/delete': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * mute/delete
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:mutes*
         */
        post: operations['mute___delete'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/mute/list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * mute/list
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:mutes*
         */
        post: operations['mute___list'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/my/apps': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * my/apps
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:account*
         */
        post: operations['my___apps'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/notes': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * notes
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['notes'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/notes/children': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * notes/children
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['notes___children'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/notes/clips': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * notes/clips
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['notes___clips'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/notes/conversation': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * notes/conversation
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['notes___conversation'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/notes/create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * notes/create
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:notes*
         */
        post: operations['notes___create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/notes/delete': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * notes/delete
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:notes*
         */
        post: operations['notes___delete'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/notes/favorites/create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * notes/favorites/create
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:favorites*
         */
        post: operations['notes___favorites___create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/notes/favorites/delete': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * notes/favorites/delete
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:favorites*
         */
        post: operations['notes___favorites___delete'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/notes/featured': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * notes/featured
         * @description No description provided.
         *
         *     **Credential required**: *Yes*
         */
        post: operations['notes___featured'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/notes/floater': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * notes/floater
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:account*
         */
        post: operations['notes___floater'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/notes/global-timeline': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * notes/global-timeline
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['notes___global-timeline'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/notes/hybrid-timeline': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * notes/hybrid-timeline
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:account*
         */
        post: operations['notes___hybrid-timeline'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/notes/local-timeline': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * notes/local-timeline
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['notes___local-timeline'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/notes/mentions': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * notes/mentions
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:account*
         */
        post: operations['notes___mentions'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/notes/polls/recommendation': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * notes/polls/recommendation
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:account*
         */
        post: operations['notes___polls___recommendation'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/notes/polls/vote': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * notes/polls/vote
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:votes*
         */
        post: operations['notes___polls___vote'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/notes/reactions': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * notes/reactions
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['notes___reactions'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/notes/reactions/create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * notes/reactions/create
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:reactions*
         */
        post: operations['notes___reactions___create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/notes/reactions/delete': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * notes/reactions/delete
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:reactions*
         */
        post: operations['notes___reactions___delete'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/notes/renotes': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * notes/renotes
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['notes___renotes'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/notes/replies': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * notes/replies
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['notes___replies'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/notes/schedule/create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * notes/schedule/create
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:notes-schedule*
         */
        post: operations['notes___schedule___create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/notes/schedule/delete': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * notes/schedule/delete
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:notes-schedule*
         */
        post: operations['notes___schedule___delete'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/notes/schedule/list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * notes/schedule/list
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:notes-schedule*
         */
        post: operations['notes___schedule___list'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/notes/search': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * notes/search
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['notes___search'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/notes/search-by-tag': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * notes/search-by-tag
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['notes___search-by-tag'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/notes/show': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * notes/show
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['notes___show'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/notes/show-partial-bulk': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * notes/show-partial-bulk
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['notes___show-partial-bulk'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/notes/state': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * notes/state
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:account*
         */
        post: operations['notes___state'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/notes/thread-muting/create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * notes/thread-muting/create
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:account*
         */
        post: operations['notes___thread-muting___create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/notes/thread-muting/delete': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * notes/thread-muting/delete
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:account*
         */
        post: operations['notes___thread-muting___delete'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/notes/timeline': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * notes/timeline
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:account*
         */
        post: operations['notes___timeline'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/notes/translate': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * notes/translate
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:account*
         */
        post: operations['notes___translate'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/notes/unrenote': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * notes/unrenote
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:notes*
         */
        post: operations['notes___unrenote'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/notes/user-list-timeline': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * notes/user-list-timeline
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:account*
         */
        post: operations['notes___user-list-timeline'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/notes/yami-timeline': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * notes/yami-timeline
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:account*
         */
        post: operations['notes___yami-timeline'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/notifications/create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * notifications/create
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:notifications*
         */
        post: operations['notifications___create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/notifications/flush': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * notifications/flush
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:notifications*
         */
        post: operations['notifications___flush'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/notifications/mark-all-as-read': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * notifications/mark-all-as-read
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:notifications*
         */
        post: operations['notifications___mark-all-as-read'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/notifications/test-notification': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * notifications/test-notification
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:notifications*
         */
        post: operations['notifications___test-notification'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/page-push': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * page-push
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes*
         */
        post: operations['page-push'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/pages/create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * pages/create
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:pages*
         */
        post: operations['pages___create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/pages/delete': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * pages/delete
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:pages*
         */
        post: operations['pages___delete'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/pages/featured': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * pages/featured
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['pages___featured'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/pages/like': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * pages/like
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:page-likes*
         */
        post: operations['pages___like'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/pages/show': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * pages/show
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['pages___show'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/pages/unlike': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * pages/unlike
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:page-likes*
         */
        post: operations['pages___unlike'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/pages/update': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * pages/update
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:pages*
         */
        post: operations['pages___update'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/ping': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * ping
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['ping'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/pinned-users': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * pinned-users
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['pinned-users'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/promo/read': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * promo/read
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:account*
         */
        post: operations['promo___read'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/renote-mute/create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * renote-mute/create
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:mutes*
         */
        post: operations['renote-mute___create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/renote-mute/delete': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * renote-mute/delete
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:mutes*
         */
        post: operations['renote-mute___delete'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/renote-mute/list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * renote-mute/list
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:mutes*
         */
        post: operations['renote-mute___list'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/request-reset-password': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * request-reset-password
         * @description Request a users password to be reset.
         *
         *     **Credential required**: *No*
         */
        post: operations['request-reset-password'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/reset-db': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * reset-db
         * @description Only available when running with <code>NODE_ENV=testing</code>. Reset the database and flush Redis.
         *
         *     **Credential required**: *No*
         */
        post: operations['reset-db'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/reset-password': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * reset-password
         * @description Complete the password reset that was previously requested.
         *
         *     **Credential required**: *No*
         */
        post: operations['reset-password'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/retention': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * retention
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['retention'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/reversi/cancel-match': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * reversi/cancel-match
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:account*
         */
        post: operations['reversi___cancel-match'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/reversi/games': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * reversi/games
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['reversi___games'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/reversi/invitations': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * reversi/invitations
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:account*
         */
        post: operations['reversi___invitations'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/reversi/match': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * reversi/match
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:account*
         */
        post: operations['reversi___match'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/reversi/show-game': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * reversi/show-game
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['reversi___show-game'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/reversi/surrender': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * reversi/surrender
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:account*
         */
        post: operations['reversi___surrender'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/reversi/verify': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * reversi/verify
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['reversi___verify'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/roles/add': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * roles/add
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes* / **Permission**: *write:community-role*
         */
        post: operations['roles___add'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/roles/assign': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * roles/assign
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes* / **Permission**: *write:community-role*
         */
        post: operations['roles___assign'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/roles/list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * roles/list
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:account*
         */
        post: operations['roles___list'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/roles/notes': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * roles/notes
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:account*
         */
        post: operations['roles___notes'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/roles/show': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * roles/show
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['roles___show'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/roles/unassign': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * roles/unassign
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes* / **Permission**: *write:community-role*
         */
        post: operations['roles___unassign'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/roles/update': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * roles/update
         * @description No description provided.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes* / **Permission**: *write:community-role*
         */
        post: operations['roles___update'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/roles/users': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * roles/users
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['roles___users'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/server-info': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * server-info
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['server-info'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/stats': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * stats
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['stats'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/sw/register': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * sw/register
         * @description Register to receive push notifications.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes*
         */
        post: operations['sw___register'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/sw/show-registration': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * sw/show-registration
         * @description Check push notification registration exists.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes*
         */
        post: operations['sw___show-registration'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/sw/unregister': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * sw/unregister
         * @description Unregister from receiving push notifications.
         *
         *     **Credential required**: *No*
         */
        post: operations['sw___unregister'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/sw/update-registration': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * sw/update-registration
         * @description Update push notification registration.
         *
         *     **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
         *     **Credential required**: *Yes*
         */
        post: operations['sw___update-registration'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/test': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * test
         * @description Endpoint for testing input validation.
         *
         *     **Credential required**: *No*
         */
        post: operations['test'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/username/available': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * username/available
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['username___available'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/users': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * users
         * @description No description provided.
         *
         *     **Credential required**: *Yes*
         */
        post: operations['users'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/users/achievements': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * users/achievements
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['users___achievements'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/users/clips': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * users/clips
         * @description Show all clips this user owns.
         *
         *     **Credential required**: *No*
         */
        post: operations['users___clips'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/users/featured-notes': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * users/featured-notes
         * @description No description provided.
         *
         *     **Credential required**: *Yes*
         */
        post: operations['users___featured-notes'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/users/flashs': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * users/flashs
         * @description Show all flashs this user created.
         *
         *     **Credential required**: *No*
         */
        post: operations['users___flashs'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/users/followers': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * users/followers
         * @description Show everyone that follows this user.
         *
         *     **Credential required**: *No*
         */
        post: operations['users___followers'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/users/following': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * users/following
         * @description Show everyone that this user is following.
         *
         *     **Credential required**: *No*
         */
        post: operations['users___following'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/users/gallery/posts': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * users/gallery/posts
         * @description Show all gallery posts by the given user.
         *
         *     **Credential required**: *No*
         */
        post: operations['users___gallery___posts'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/users/get-frequently-replied-users': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * users/get-frequently-replied-users
         * @description Get a list of other users that the specified user frequently replies to.
         *
         *     **Credential required**: *No*
         */
        post: operations['users___get-frequently-replied-users'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/users/lists/create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * users/lists/create
         * @description Create a new list of users.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:account*
         */
        post: operations['users___lists___create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/users/lists/create-from-public': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * users/lists/create-from-public
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:account*
         */
        post: operations['users___lists___create-from-public'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/users/lists/delete': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * users/lists/delete
         * @description Delete an existing list of users.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:account*
         */
        post: operations['users___lists___delete'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/users/lists/favorite': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * users/lists/favorite
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:account*
         */
        post: operations['users___lists___favorite'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/users/lists/get-memberships': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * users/lists/get-memberships
         * @description No description provided.
         *
         *     **Credential required**: *No* / **Permission**: *read:account*
         */
        post: operations['users___lists___get-memberships'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/users/lists/list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * users/lists/list
         * @description Show all lists that the authenticated user has created.
         *
         *     **Credential required**: *No* / **Permission**: *read:account*
         */
        post: operations['users___lists___list'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/users/lists/pull': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * users/lists/pull
         * @description Remove a user from a list.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:account*
         */
        post: operations['users___lists___pull'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/users/lists/push': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * users/lists/push
         * @description Add a user to an existing list.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:account*
         */
        post: operations['users___lists___push'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/users/lists/show': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * users/lists/show
         * @description Show the properties of a list.
         *
         *     **Credential required**: *No* / **Permission**: *read:account*
         */
        post: operations['users___lists___show'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/users/lists/unfavorite': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * users/lists/unfavorite
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:account*
         */
        post: operations['users___lists___unfavorite'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/users/lists/update': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * users/lists/update
         * @description Update the properties of a list.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:account*
         */
        post: operations['users___lists___update'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/users/lists/update-membership': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * users/lists/update-membership
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:account*
         */
        post: operations['users___lists___update-membership'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/users/notes': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * users/notes
         * @description No description provided.
         *
         *     **Credential required**: *No*
         */
        post: operations['users___notes'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/users/pages': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * users/pages
         * @description Show all pages this user created.
         *
         *     **Credential required**: *No*
         */
        post: operations['users___pages'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/users/reactions': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * users/reactions
         * @description Show all reactions this user made.
         *
         *     **Credential required**: *No*
         */
        post: operations['users___reactions'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/users/recommendation': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * users/recommendation
         * @description Show users that the authenticated user might be interested to follow.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:account*
         */
        post: operations['users___recommendation'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/users/relation': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * users/relation
         * @description Show the different kinds of relations between the authenticated user and the specified user(s).
         *
         *     **Credential required**: *Yes* / **Permission**: *read:account*
         */
        post: operations['users___relation'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/users/report-abuse': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * users/report-abuse
         * @description File a report.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:report-abuse*
         */
        post: operations['users___report-abuse'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/users/search': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * users/search
         * @description Search for users.
         *
         *     **Credential required**: *No*
         */
        post: operations['users___search'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/users/search-by-username-and-host': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * users/search-by-username-and-host
         * @description Search for a user by username and/or host.
         *
         *     **Credential required**: *No*
         */
        post: operations['users___search-by-username-and-host'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/users/show': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * users/show
         * @description Show the properties of a user.
         *
         *     **Credential required**: *No*
         */
        post: operations['users___show'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/users/update-memo': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * users/update-memo
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *write:account*
         */
        post: operations['users___update-memo'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/admin/emoji/list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * v2/admin/emoji/list
         * @description No description provided.
         *
         *     **Credential required**: *Yes* / **Permission**: *read:admin:emoji*
         */
        post: operations['v2___admin___emoji___list'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
};
export type webhooks = Record<string, never>;
export type components = {
    schemas: {
        Error: {
            /** @description An error object. */
            error: {
                /** @description An error code. Unique within the endpoint. */
                code: string;
                /** @description An error message. */
                message: string;
                /**
                 * Format: uuid
                 * @description An error ID. This ID is static.
                 */
                id: string;
            };
        };
        UserLite: {
            /**
             * Format: id
             * @example xxxxxxxxxx
             */
            id: string;
            /** @example 藍 */
            name: string | null;
            /** @example ai */
            username: string;
            /**
             * @description The local host is represented with `null`.
             * @example misskey.example.com
             */
            host: string | null;
            /**
             * @description User whom registeration is approved or not
             * @default false
             */
            approved: boolean;
            /** Format: url */
            avatarUrl: string | null;
            avatarBlurhash: string | null;
            avatarDecorations: {
                /** Format: id */
                id: string;
                angle?: number;
                flipH?: boolean;
                /** Format: url */
                url: string;
                offsetX?: number;
                offsetY?: number;
            }[];
            isBot?: boolean;
            isCat?: boolean;
            requireSigninToViewContents?: boolean;
            makeNotesFollowersOnlyBefore?: number | null;
            makeNotesHiddenBefore?: number | null;
            isInYamiMode?: boolean;
            instance?: {
                name: string | null;
                softwareName: string | null;
                softwareVersion: string | null;
                iconUrl: string | null;
                faviconUrl: string | null;
                themeColor: string | null;
            };
            emojis: {
                [key: string]: string;
            };
            /** @enum {string} */
            onlineStatus: 'unknown' | 'online' | 'active' | 'offline';
            badgeRoles?: {
                name: string;
                iconUrl: string | null;
                displayOrder: number;
            }[];
        };
        UserDetailedNotMeOnly: {
            /** Format: url */
            url: string | null;
            /** Format: uri */
            uri: string | null;
            /** Format: uri */
            movedTo: string | null;
            alsoKnownAs: string[] | null;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string | null;
            /** Format: date-time */
            lastFetchedAt: string | null;
            /** Format: url */
            bannerUrl: string | null;
            bannerBlurhash: string | null;
            isLocked: boolean;
            isSilenced: boolean;
            /** @example false */
            isSuspended: boolean;
            /** @example Hi masters, I am Ai! */
            description: string | null;
            location: string | null;
            /** @example 2018-03-12 */
            birthday: string | null;
            /** @example Steve */
            listenbrainz: string | null;
            /** @example ja-JP */
            lang: string | null;
            fields: {
                name: string;
                value: string;
            }[];
            verifiedLinks: string[];
            followersCount: number;
            followingCount: number;
            notesCount: number;
            pinnedNoteIds: string[];
            pinnedNotes: components['schemas']['Note'][];
            pinnedPageId: string | null;
            pinnedPage: components['schemas']['Page'] | null;
            publicReactions: boolean;
            hideActivity: boolean;
            hideProfileFiles: boolean;
            /** @enum {string} */
            notesVisibility: 'public' | 'followers' | 'private';
            /** @enum {string} */
            followingVisibility: 'public' | 'followers' | 'private';
            /** @enum {string} */
            followersVisibility: 'public' | 'followers' | 'private';
            /** @enum {string} */
            chatScope: 'everyone' | 'following' | 'followers' | 'mutual' | 'none';
            canChat: boolean;
            roles: components['schemas']['RoleLite'][];
            followedMessage?: string | null;
            memo: string | null;
            moderationNote?: string;
            twoFactorEnabled?: boolean;
            usePasswordLessLogin?: boolean;
            securityKeys?: boolean;
            approved?: boolean;
            isFollowing?: boolean;
            isFollowed?: boolean;
            hasPendingFollowRequestFromYou?: boolean;
            hasPendingFollowRequestToYou?: boolean;
            isBlocking?: boolean;
            isBlocked?: boolean;
            isMuted?: boolean;
            isRenoteMuted?: boolean;
            /** @enum {string} */
            notify?: 'normal' | 'none';
            withReplies?: boolean;
        };
        MeDetailedOnly: {
            /** Format: id */
            avatarId: string | null;
            /** Format: id */
            bannerId: string | null;
            followedMessage: string | null;
            isModerator: boolean | null;
            isAdmin: boolean | null;
            injectFeaturedNote: boolean;
            receiveAnnouncementEmail: boolean;
            alwaysMarkNsfw: boolean;
            autoSensitive: boolean;
            carefulBot: boolean;
            autoAcceptFollowed: boolean;
            noCrawle: boolean;
            preventAiLearning: boolean;
            isExplorable: boolean;
            isDeleted: boolean;
            /** @enum {string} */
            twoFactorBackupCodesStock: 'full' | 'partial' | 'none';
            hideOnlineStatus: boolean;
            activeStatusVisibility: {
                /** @enum {string} */
                type: 'all' | 'following' | 'followers' | 'mutualFollow' | 'followingOrFollower' | 'never';
            } | {
                /** @enum {string} */
                type: 'list';
                /** Format: misskey:id */
                userListId: string;
            };
            hideSearchResult: boolean;
            hasUnreadSpecifiedNotes: boolean;
            hasUnreadMentions: boolean;
            hasUnreadAnnouncement: boolean;
            unreadAnnouncements: components['schemas']['Announcement'][];
            hasUnreadAntenna: boolean;
            hasUnreadChannel: boolean;
            hasUnreadChatMessages: boolean;
            hasUnreadNotification: boolean;
            hasPendingReceivedFollowRequest: boolean;
            unreadNotificationsCount: number;
            mutedWords: string[][];
            hardMutedWords: string[][];
            mutedInstances: string[] | null;
            notificationRecieveConfig: {
                note?: {
                    /** @enum {string} */
                    type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'followingOrFollower' | 'never';
                } | {
                    /** @enum {string} */
                    type: 'list';
                    /** Format: misskey:id */
                    userListId: string;
                };
                follow?: {
                    /** @enum {string} */
                    type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'followingOrFollower' | 'never';
                } | {
                    /** @enum {string} */
                    type: 'list';
                    /** Format: misskey:id */
                    userListId: string;
                };
                mention?: {
                    /** @enum {string} */
                    type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'followingOrFollower' | 'never';
                } | {
                    /** @enum {string} */
                    type: 'list';
                    /** Format: misskey:id */
                    userListId: string;
                };
                reply?: {
                    /** @enum {string} */
                    type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'followingOrFollower' | 'never';
                } | {
                    /** @enum {string} */
                    type: 'list';
                    /** Format: misskey:id */
                    userListId: string;
                };
                renote?: {
                    /** @enum {string} */
                    type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'followingOrFollower' | 'never';
                } | {
                    /** @enum {string} */
                    type: 'list';
                    /** Format: misskey:id */
                    userListId: string;
                };
                quote?: {
                    /** @enum {string} */
                    type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'followingOrFollower' | 'never';
                } | {
                    /** @enum {string} */
                    type: 'list';
                    /** Format: misskey:id */
                    userListId: string;
                };
                reaction?: {
                    /** @enum {string} */
                    type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'followingOrFollower' | 'never';
                } | {
                    /** @enum {string} */
                    type: 'list';
                    /** Format: misskey:id */
                    userListId: string;
                };
                pollEnded?: {
                    /** @enum {string} */
                    type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'followingOrFollower' | 'never';
                } | {
                    /** @enum {string} */
                    type: 'list';
                    /** Format: misskey:id */
                    userListId: string;
                };
                receiveFollowRequest?: {
                    /** @enum {string} */
                    type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'followingOrFollower' | 'never';
                } | {
                    /** @enum {string} */
                    type: 'list';
                    /** Format: misskey:id */
                    userListId: string;
                };
                followRequestAccepted?: {
                    /** @enum {string} */
                    type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'followingOrFollower' | 'never';
                } | {
                    /** @enum {string} */
                    type: 'list';
                    /** Format: misskey:id */
                    userListId: string;
                };
                roleAssigned?: {
                    /** @enum {string} */
                    type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'followingOrFollower' | 'never';
                } | {
                    /** @enum {string} */
                    type: 'list';
                    /** Format: misskey:id */
                    userListId: string;
                };
                chatRoomInvitationReceived?: {
                    /** @enum {string} */
                    type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'followingOrFollower' | 'never';
                } | {
                    /** @enum {string} */
                    type: 'list';
                    /** Format: misskey:id */
                    userListId: string;
                };
                achievementEarned?: {
                    /** @enum {string} */
                    type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'followingOrFollower' | 'never';
                } | {
                    /** @enum {string} */
                    type: 'list';
                    /** Format: misskey:id */
                    userListId: string;
                };
                app?: {
                    /** @enum {string} */
                    type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'followingOrFollower' | 'never';
                } | {
                    /** @enum {string} */
                    type: 'list';
                    /** Format: misskey:id */
                    userListId: string;
                };
                test?: {
                    /** @enum {string} */
                    type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'followingOrFollower' | 'never';
                } | {
                    /** @enum {string} */
                    type: 'list';
                    /** Format: misskey:id */
                    userListId: string;
                };
                blocked?: {
                    /** @enum {string} */
                    type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'followingOrFollower' | 'never';
                } | {
                    /** @enum {string} */
                    type: 'list';
                    /** Format: misskey:id */
                    userListId: string;
                };
                unblocked?: {
                    /** @enum {string} */
                    type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'followingOrFollower' | 'never';
                } | {
                    /** @enum {string} */
                    type: 'list';
                    /** Format: misskey:id */
                    userListId: string;
                };
            };
            emailNotificationTypes: string[];
            achievements: components['schemas']['Achievement'][];
            loggedInDays: number;
            policies: components['schemas']['RolePolicies'];
            /** @default false */
            twoFactorEnabled: boolean;
            /** @default false */
            usePasswordLessLogin: boolean;
            /** @default false */
            securityKeys: boolean;
            email?: string | null;
            emailVerified?: boolean | null;
            securityKeysList?: {
                /**
                 * Format: id
                 * @example xxxxxxxxxx
                 */
                id: string;
                name: string;
                /** Format: date-time */
                lastUsed: string;
            }[];
        };
        UserDetailedNotMe: components['schemas']['UserLite'] & components['schemas']['UserDetailedNotMeOnly'];
        MeDetailed: components['schemas']['UserLite'] & components['schemas']['UserDetailedNotMe'] & components['schemas']['MeDetailedOnly'];
        UserDetailed: components['schemas']['UserDetailedNotMe'] | components['schemas']['MeDetailed'];
        User: components['schemas']['UserLite'] | components['schemas']['UserDetailed'];
        UserList: {
            /**
             * Format: id
             * @example xxxxxxxxxx
             */
            id: string;
            /** Format: date-time */
            createdAt: string;
            name: string;
            userIds?: string[];
            isPublic: boolean;
        };
        Achievement: {
            name: components['schemas']['AchievementName'];
            unlockedAt: number;
        };
        /** @enum {string} */
        AchievementName: 'notes1' | 'notes10' | 'notes100' | 'notes500' | 'notes1000' | 'notes5000' | 'notes10000' | 'notes20000' | 'notes30000' | 'notes40000' | 'notes50000' | 'notes60000' | 'notes70000' | 'notes80000' | 'notes90000' | 'notes100000' | 'login3' | 'login7' | 'login15' | 'login30' | 'login60' | 'login100' | 'login200' | 'login300' | 'login400' | 'login500' | 'login600' | 'login700' | 'login800' | 'login900' | 'login1000' | 'passedSinceAccountCreated1' | 'passedSinceAccountCreated2' | 'passedSinceAccountCreated3' | 'loggedInOnBirthday' | 'loggedInOnNewYearsDay' | 'noteClipped1' | 'noteFavorited1' | 'myNoteFavorited1' | 'profileFilled' | 'markedAsCat' | 'markedAsYamiModeUser' | 'following1' | 'following10' | 'following50' | 'following100' | 'following300' | 'followers1' | 'followers10' | 'followers50' | 'followers100' | 'followers300' | 'followers500' | 'followers1000' | 'collectAchievements30' | 'viewAchievements3min' | 'iLoveMisskey' | 'foundTreasure' | 'client30min' | 'client60min' | 'noteDeletedWithin1min' | 'postedAtLateNight' | 'postedAt0min0sec' | 'selfQuote' | 'htl20npm' | 'viewInstanceChart' | 'outputHelloWorldOnScratchpad' | 'open3windows' | 'driveFolderCircularReference' | 'reactWithoutRead' | 'clickedClickHere' | 'justPlainLucky' | 'setNameToSyuilo' | 'cookieClicked' | 'brainDiver' | 'smashTestNotificationButton' | 'tutorialCompleted' | 'bubbleGameExplodingHead' | 'bubbleGameDoubleExplodingHead';
        Ad: {
            /**
             * Format: id
             * @example xxxxxxxxxx
             */
            id: string;
            /** Format: date-time */
            expiresAt: string;
            /** Format: date-time */
            startsAt: string;
            place: string;
            priority: string;
            ratio: number;
            url: string;
            imageUrl: string;
            memo: string;
            dayOfWeek: number;
        };
        Announcement: {
            /**
             * Format: id
             * @example xxxxxxxxxx
             */
            id: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string | null;
            text: string;
            title: string;
            imageUrl: string | null;
            /** @enum {string} */
            icon: 'info' | 'warning' | 'error' | 'success';
            /** @enum {string} */
            display: 'dialog' | 'normal' | 'banner';
            needConfirmationToRead: boolean;
            silence: boolean;
            forYou: boolean;
            isRead?: boolean;
        };
        App: {
            id: string;
            name: string;
            callbackUrl: string | null;
            permission: string[];
            secret?: string;
            isAuthorized?: boolean;
        };
        Note: {
            /**
             * Format: id
             * @example xxxxxxxxxx
             */
            id: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            deletedAt?: string | null;
            text: string | null;
            cw?: string | null;
            /** Format: id */
            userId: string;
            user: components['schemas']['UserLite'];
            /**
             * Format: id
             * @example xxxxxxxxxx
             */
            replyId?: string | null;
            /**
             * Format: id
             * @example xxxxxxxxxx
             */
            renoteId?: string | null;
            reply?: components['schemas']['Note'] | null;
            renote?: components['schemas']['Note'] | null;
            isHidden?: boolean;
            /** @enum {string} */
            visibility: 'public' | 'home' | 'followers' | 'specified';
            mentions?: string[];
            visibleUserIds?: string[];
            fileIds?: string[];
            files?: components['schemas']['DriveFile'][];
            tags?: string[];
            poll?: {
                /** Format: date-time */
                expiresAt?: string | null;
                multiple: boolean;
                choices: {
                    isVoted: boolean;
                    text: string;
                    votes: number;
                }[];
            } | null;
            /** Format: date-time */
            deleteAt?: string | null;
            emojis?: {
                [key: string]: string;
            };
            /**
             * Format: id
             * @example xxxxxxxxxx
             */
            channelId?: string | null;
            channel?: {
                id: string;
                name: string;
                color: string;
                isSensitive: boolean;
                allowRenoteToExternal: boolean;
                /** @enum {string} */
                followersVisibility: 'public' | 'followers' | 'private';
                userId: string | null;
            } | null;
            localOnly?: boolean;
            isNoteInYamiMode?: boolean;
            /** @enum {string|null} */
            reactionAcceptance: 'likeOnly' | 'likeOnlyForRemote' | 'nonSensitiveOnly' | 'nonSensitiveOnlyForLocalLikeOnlyForRemote' | null;
            reactionEmojis: {
                [key: string]: string;
            };
            reactions: {
                [key: string]: number;
            };
            reactionCount: number;
            renoteCount: number;
            repliesCount: number;
            uri?: string;
            url?: string;
            reactionAndUserPairCache?: string[];
            clippedCount?: number;
            hasPoll?: boolean;
            myReaction?: string | null;
        };
        NoteReaction: {
            /**
             * Format: id
             * @example xxxxxxxxxx
             */
            id: string;
            /** Format: date-time */
            createdAt: string;
            user: components['schemas']['UserLite'];
            type: string;
        };
        NoteFavorite: {
            /**
             * Format: id
             * @example xxxxxxxxxx
             */
            id: string;
            /** Format: date-time */
            createdAt: string;
            note: components['schemas']['Note'];
            /** Format: id */
            noteId: string;
        };
        Notification: {
            /** Format: id */
            id: string;
            /** Format: date-time */
            createdAt: string;
            /** @enum {string} */
            type: 'note';
            user: components['schemas']['UserLite'];
            /** Format: id */
            userId: string;
            note: components['schemas']['Note'];
        } | {
            /** Format: id */
            id: string;
            /** Format: date-time */
            createdAt: string;
            /** @enum {string} */
            type: 'mention';
            user: components['schemas']['UserLite'];
            /** Format: id */
            userId: string;
            note: components['schemas']['Note'];
        } | {
            /** Format: id */
            id: string;
            /** Format: date-time */
            createdAt: string;
            /** @enum {string} */
            type: 'reply';
            user: components['schemas']['UserLite'];
            /** Format: id */
            userId: string;
            note: components['schemas']['Note'];
        } | {
            /** Format: id */
            id: string;
            /** Format: date-time */
            createdAt: string;
            /** @enum {string} */
            type: 'renote';
            user: components['schemas']['UserLite'];
            /** Format: id */
            userId: string;
            note: components['schemas']['Note'];
        } | {
            /** Format: id */
            id: string;
            /** Format: date-time */
            createdAt: string;
            /** @enum {string} */
            type: 'quote';
            user: components['schemas']['UserLite'];
            /** Format: id */
            userId: string;
            note: components['schemas']['Note'];
        } | {
            /** Format: id */
            id: string;
            /** Format: date-time */
            createdAt: string;
            /** @enum {string} */
            type: 'reaction';
            user: components['schemas']['UserLite'];
            /** Format: id */
            userId: string;
            note: components['schemas']['Note'];
            reaction: string;
        } | {
            /** Format: id */
            id: string;
            /** Format: date-time */
            createdAt: string;
            /** @enum {string} */
            type: 'pollEnded';
            user: components['schemas']['UserLite'];
            /** Format: id */
            userId: string;
            note: components['schemas']['Note'];
        } | {
            /** Format: id */
            id: string;
            /** Format: date-time */
            createdAt: string;
            /** @enum {string} */
            type: 'follow';
            user: components['schemas']['UserLite'];
            /** Format: id */
            userId: string;
        } | {
            /** Format: id */
            id: string;
            /** Format: date-time */
            createdAt: string;
            /** @enum {string} */
            type: 'receiveFollowRequest';
            user: components['schemas']['UserLite'];
            /** Format: id */
            userId: string;
        } | {
            /** Format: id */
            id: string;
            /** Format: date-time */
            createdAt: string;
            /** @enum {string} */
            type: 'followRequestAccepted';
            user: components['schemas']['UserLite'];
            /** Format: id */
            userId: string;
            message: string | null;
        } | {
            /** Format: id */
            id: string;
            /** Format: date-time */
            createdAt: string;
            /** @enum {string} */
            type: 'roleAssigned';
            role: components['schemas']['Role'];
        } | {
            /** Format: id */
            id: string;
            /** Format: date-time */
            createdAt: string;
            /** @enum {string} */
            type: 'chatRoomInvitationReceived';
            invitation: components['schemas']['ChatRoomInvitation'];
        } | {
            /** Format: id */
            id: string;
            /** Format: date-time */
            createdAt: string;
            /** @enum {string} */
            type: 'achievementEarned';
            achievement: components['schemas']['AchievementName'];
        } | {
            /** Format: id */
            id: string;
            /** Format: date-time */
            createdAt: string;
            /** @enum {string} */
            type: 'exportCompleted';
            /** @enum {string} */
            exportedEntity: 'antenna' | 'blocking' | 'clip' | 'customEmoji' | 'favorite' | 'following' | 'muting' | 'note' | 'userList';
            /** Format: id */
            fileId: string;
        } | {
            /** Format: id */
            id: string;
            /** Format: date-time */
            createdAt: string;
            /** @enum {string} */
            type: 'login';
        } | {
            /** Format: id */
            id: string;
            /** Format: date-time */
            createdAt: string;
            /** @enum {string} */
            type: 'createToken';
        } | {
            /** Format: id */
            id: string;
            /** Format: date-time */
            createdAt: string;
            /** @enum {string} */
            type: 'app';
            body: string;
            header: string | null;
            icon: string | null;
        } | {
            /** Format: id */
            id: string;
            /** Format: date-time */
            createdAt: string;
            /** @enum {string} */
            type: 'scheduledNoteFailed';
            reason: string;
        } | {
            /** Format: id */
            id: string;
            /** Format: date-time */
            createdAt: string;
            /** @enum {string} */
            type: 'scheduledNotePosted';
            user: components['schemas']['UserLite'];
            /** Format: id */
            userId: string;
            note: components['schemas']['Note'];
        } | {
            /** Format: id */
            id: string;
            /** Format: date-time */
            createdAt: string;
            /** @enum {string} */
            type: 'reaction:grouped';
            note: components['schemas']['Note'];
            reactions: {
                user: components['schemas']['UserLite'];
                reaction: string;
            }[];
        } | {
            /** Format: id */
            id: string;
            /** Format: date-time */
            createdAt: string;
            /** @enum {string} */
            type: 'renote:grouped';
            note: components['schemas']['Note'];
            users: components['schemas']['UserLite'][];
        } | {
            /** Format: id */
            id: string;
            /** Format: date-time */
            createdAt: string;
            /** @enum {string} */
            type: 'test';
        } | {
            /** Format: id */
            id: string;
            /** Format: date-time */
            createdAt: string;
            /** @enum {string} */
            type: 'blocked';
            user: components['schemas']['UserLite'];
            /** Format: id */
            userId: string;
        } | {
            /** Format: id */
            id: string;
            /** Format: date-time */
            createdAt: string;
            /** @enum {string} */
            type: 'unblocked';
            user: components['schemas']['UserLite'];
            /** Format: id */
            userId: string;
        };
        DriveFile: {
            /**
             * Format: id
             * @example xxxxxxxxxx
             */
            id: string;
            /** Format: date-time */
            createdAt: string;
            /** @example 192.jpg */
            name: string;
            /** @example image/jpeg */
            type: string;
            /**
             * Format: md5
             * @example 15eca7fba0480996e2245f5185bf39f2
             */
            md5: string;
            /** @example 51469 */
            size: number;
            isSensitive: boolean;
            blurhash: string | null;
            properties: {
                /** @example 1280 */
                width?: number;
                /** @example 720 */
                height?: number;
                /** @example 8 */
                orientation?: number;
                /** @example rgb(40,65,87) */
                avgColor?: string;
            };
            /** Format: url */
            url: string;
            /** Format: url */
            thumbnailUrl: string | null;
            comment: string | null;
            /**
             * Format: id
             * @example xxxxxxxxxx
             */
            folderId: string | null;
            folder?: components['schemas']['DriveFolder'] | null;
            /**
             * Format: id
             * @example xxxxxxxxxx
             */
            userId: string | null;
            user?: components['schemas']['UserLite'] | null;
        };
        DriveFolder: {
            /**
             * Format: id
             * @example xxxxxxxxxx
             */
            id: string;
            /** Format: date-time */
            createdAt: string;
            name: string;
            /**
             * Format: id
             * @example xxxxxxxxxx
             */
            parentId: string | null;
            foldersCount?: number;
            filesCount?: number;
            parent?: components['schemas']['DriveFolder'] | null;
        };
        Following: {
            /**
             * Format: id
             * @example xxxxxxxxxx
             */
            id: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: id */
            followeeId: string;
            /** Format: id */
            followerId: string;
            followee?: components['schemas']['UserDetailedNotMe'];
            follower?: components['schemas']['UserDetailedNotMe'];
        };
        Muting: {
            /**
             * Format: id
             * @example xxxxxxxxxx
             */
            id: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            expiresAt: string | null;
            /** Format: id */
            muteeId: string;
            mutee: components['schemas']['UserDetailedNotMe'];
        };
        RenoteMuting: {
            /**
             * Format: id
             * @example xxxxxxxxxx
             */
            id: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: id */
            muteeId: string;
            mutee: components['schemas']['UserDetailedNotMe'];
        };
        Blocking: {
            /**
             * Format: id
             * @example xxxxxxxxxx
             */
            id: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: id */
            blockeeId: string;
            blockee: components['schemas']['UserDetailedNotMe'];
        };
        Hashtag: {
            /** @example misskey */
            tag: string;
            mentionedUsersCount: number;
            mentionedLocalUsersCount: number;
            mentionedRemoteUsersCount: number;
            attachedUsersCount: number;
            attachedLocalUsersCount: number;
            attachedRemoteUsersCount: number;
        };
        InviteCode: {
            /**
             * Format: id
             * @example xxxxxxxxxx
             */
            id: string;
            /** @example GR6S02ERUA5VR */
            code: string;
            /** Format: date-time */
            expiresAt: string | null;
            /** Format: date-time */
            createdAt: string;
            createdBy: components['schemas']['UserLite'] | null;
            usedBy: components['schemas']['UserLite'] | null;
            /** Format: date-time */
            usedAt: string | null;
            used: boolean;
        };
        Page: {
            /**
             * Format: id
             * @example xxxxxxxxxx
             */
            id: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            /** Format: id */
            userId: string;
            user: components['schemas']['UserLite'];
            content: components['schemas']['PageBlock'][];
            variables: Record<string, never>[];
            title: string;
            name: string;
            summary: string | null;
            hideTitleWhenPinned: boolean;
            alignCenter: boolean;
            font: string;
            script: string;
            eyeCatchingImageId: string | null;
            eyeCatchingImage: components['schemas']['DriveFile'] | null;
            attachedFiles: components['schemas']['DriveFile'][];
            likedCount: number;
            isLiked?: boolean;
        };
        PageBlock: {
            id: string;
            /** @enum {string} */
            type: 'text';
            text: string;
        } | {
            id: string;
            /** @enum {string} */
            type: 'section';
            title: string;
            children: components['schemas']['PageBlock'][];
        } | {
            id: string;
            /** @enum {string} */
            type: 'image';
            fileId: string | null;
        } | {
            id: string;
            /** @enum {string} */
            type: 'note';
            detailed: boolean;
            note: string | null;
        };
        Channel: {
            /**
             * Format: id
             * @example xxxxxxxxxx
             */
            id: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            lastNotedAt: string | null;
            name: string;
            description: string | null;
            /** Format: id */
            userId: string | null;
            /** Format: url */
            bannerUrl: string | null;
            pinnedNoteIds: string[];
            color: string;
            isArchived: boolean;
            usersCount: number;
            notesCount: number;
            isSensitive: boolean;
            allowRenoteToExternal: boolean;
            /** @enum {string} */
            followersVisibility: 'public' | 'followers' | 'private';
            isFollowing?: boolean;
            isFavorited?: boolean;
            pinnedNotes?: components['schemas']['Note'][];
        };
        QueueCount: {
            waiting: number;
            active: number;
            completed: number;
            failed: number;
            delayed: number;
        };
        QueueMetrics: {
            meta: {
                count: number;
                prevTS: number;
                prevCount: number;
            };
            data: number[];
            count: number;
        };
        QueueJob: {
            id: string;
            name: string;
            data: Record<string, never>;
            opts: Record<string, never>;
            timestamp: number;
            processedOn?: number;
            processedBy?: string;
            finishedOn?: number;
            progress: Record<string, never>;
            attempts: number;
            delay: number;
            failedReason: string;
            stacktrace: string[];
            returnValue: Record<string, never>;
            isFailed: boolean;
        };
        Antenna: {
            /** Format: id */
            id: string;
            /** Format: date-time */
            createdAt: string;
            name: string;
            keywords: string[][];
            excludeKeywords: string[][];
            /** @enum {string} */
            src: 'home' | 'all' | 'users' | 'list' | 'users_blacklist';
            /** Format: id */
            userListId: string | null;
            users: string[];
            /** @default false */
            caseSensitive: boolean;
            /** @default false */
            localOnly: boolean;
            /** @default false */
            excludeBots: boolean;
            /** @default false */
            withReplies: boolean;
            withFile: boolean;
            isActive: boolean;
            /** @default false */
            hasUnreadNote: boolean;
            /** @default false */
            notify: boolean;
            /** @default false */
            excludeNotesInSensitiveChannel: boolean;
        };
        Clip: {
            /**
             * Format: id
             * @example xxxxxxxxxx
             */
            id: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            lastClippedAt: string | null;
            /** Format: id */
            userId: string;
            user: components['schemas']['UserLite'];
            name: string;
            description: string | null;
            isPublic: boolean;
            favoritedCount: number;
            isFavorited?: boolean;
            notesCount?: number;
        };
        FederationInstance: {
            /** Format: id */
            id: string;
            /** Format: date-time */
            firstRetrievedAt: string;
            /** @example misskey.example.com */
            host: string;
            usersCount: number;
            notesCount: number;
            followingCount: number;
            followersCount: number;
            isNotResponding: boolean;
            isSuspended: boolean;
            /** @enum {string} */
            suspensionState: 'none' | 'manuallySuspended' | 'goneSuspended' | 'autoSuspendedForNotResponding' | 'softwareSuspended';
            isBlocked: boolean;
            /** @example misskey */
            softwareName: string | null;
            softwareVersion: string | null;
            /** @example true */
            openRegistrations: boolean | null;
            name: string | null;
            description: string | null;
            maintainerName: string | null;
            maintainerEmail: string | null;
            isSilenced: boolean;
            isMediaSilenced: boolean;
            /** Format: url */
            iconUrl: string | null;
            /** Format: url */
            faviconUrl: string | null;
            themeColor: string | null;
            /** Format: date-time */
            infoUpdatedAt: string | null;
            /** Format: date-time */
            latestRequestReceivedAt: string | null;
            moderationNote?: string | null;
            reversiVersion?: string | null;
        };
        GalleryPost: {
            /**
             * Format: id
             * @example xxxxxxxxxx
             */
            id: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            /** Format: id */
            userId: string;
            user: components['schemas']['UserLite'];
            title: string;
            description: string | null;
            fileIds?: string[];
            files?: components['schemas']['DriveFile'][];
            tags?: string[];
            isSensitive: boolean;
            likedCount: number;
            isLiked?: boolean;
        };
        EmojiSimple: {
            aliases: string[];
            name: string;
            category: string | null;
            url: string;
            localOnly?: boolean;
            isSensitive?: boolean;
            roleIdsThatCanBeUsedThisEmojiAsReaction?: string[];
        };
        EmojiDetailed: {
            /** Format: id */
            id: string;
            aliases: string[];
            name: string;
            category: string | null;
            /** @description The local host is represented with `null`. */
            host: string | null;
            url: string;
            license: string | null;
            isSensitive: boolean;
            localOnly: boolean;
            roleIdsThatCanBeUsedThisEmojiAsReaction: string[];
        };
        EmojiDetailedAdmin: {
            /** Format: id */
            id: string;
            /** Format: date-time */
            updatedAt: string | null;
            name: string;
            /** @description The local host is represented with `null`. */
            host: string | null;
            publicUrl: string;
            originalUrl: string;
            uri: string | null;
            type: string | null;
            aliases: string[];
            category: string | null;
            license: string | null;
            localOnly: boolean;
            isSensitive: boolean;
            roleIdsThatCanBeUsedThisEmojiAsReaction: {
                /** Format: misskey:id */
                id: string;
                name: string;
            }[];
        };
        Flash: {
            /**
             * Format: id
             * @example xxxxxxxxxx
             */
            id: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            /** Format: id */
            userId: string;
            user: components['schemas']['UserLite'];
            title: string;
            summary: string;
            script: string;
            /** @enum {string} */
            visibility: 'private' | 'public';
            likedCount: number | null;
            isLiked?: boolean;
        };
        Signin: {
            id: string;
            /** Format: date-time */
            createdAt: string;
            ip: string;
            headers: Record<string, never>;
            success: boolean;
        };
        RoleCondFormulaLogics: {
            id: string;
            /** @enum {string} */
            type: 'and' | 'or';
            values: components['schemas']['RoleCondFormulaValue'][];
        };
        RoleCondFormulaValueNot: {
            id: string;
            /** @enum {string} */
            type: 'not';
            value: components['schemas']['RoleCondFormulaValue'];
        };
        RoleCondFormulaValueIsLocalOrRemote: {
            id: string;
            /** @enum {string} */
            type: 'isLocal' | 'isRemote';
        };
        RoleCondFormulaValueUserSettingBooleanSchema: {
            id: string;
            /** @enum {string} */
            type: 'isSuspended' | 'isLocked' | 'isBot' | 'isCat' | 'isExplorable';
        };
        RoleCondFormulaValueAssignedRole: {
            id: string;
            /** @enum {string} */
            type: 'roleAssignedTo';
            /**
             * Format: id
             * @example xxxxxxxxxx
             */
            roleId: string;
        };
        RoleCondFormulaValueCreated: {
            id: string;
            /** @enum {string} */
            type: 'createdLessThan' | 'createdMoreThan';
            sec: number;
        };
        RoleCondFormulaFollowersOrFollowingOrNotes: {
            id: string;
            /** @enum {string} */
            type: 'followersLessThanOrEq' | 'followersMoreThanOrEq' | 'followingLessThanOrEq' | 'followingMoreThanOrEq' | 'notesLessThanOrEq' | 'notesMoreThanOrEq';
            value: number;
        };
        RoleCondFormulaValue: components['schemas']['RoleCondFormulaLogics'] | components['schemas']['RoleCondFormulaValueNot'] | components['schemas']['RoleCondFormulaValueIsLocalOrRemote'] | components['schemas']['RoleCondFormulaValueUserSettingBooleanSchema'] | components['schemas']['RoleCondFormulaValueAssignedRole'] | components['schemas']['RoleCondFormulaValueCreated'] | components['schemas']['RoleCondFormulaFollowersOrFollowingOrNotes'];
        RoleLite: {
            /**
             * Format: id
             * @example xxxxxxxxxx
             */
            id: string;
            /** @example New Role */
            name: string;
            /** @example #000000 */
            color: string | null;
            iconUrl: string | null;
            description: string;
            /** @example false */
            isModerator: boolean;
            /** @example false */
            isAdministrator: boolean;
            /** @example 0 */
            displayOrder: number;
        };
        Role: components['schemas']['RoleLite'] & {
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            /** @enum {string} */
            target: 'manual' | 'conditional';
            condFormula: components['schemas']['RoleCondFormulaValue'];
            /** @example false */
            isPublic: boolean;
            /** @example false */
            isExplorable: boolean;
            /** @example false */
            asBadge: boolean;
            /** @example false */
            preserveAssignmentOnMoveAccount: boolean;
            /** @example false */
            canEditMembersByModerator: boolean;
            policies: {
                [key: string]: {
                    value?: number | boolean;
                    priority?: number;
                    useDefault?: boolean;
                };
            };
            usersCount: number;
        };
        RolePolicies: {
            gtlAvailable: boolean;
            ltlAvailable: boolean;
            yamiTlAvailable: boolean;
            canYamiNote: boolean;
            canPublicNote: boolean;
            canFederateNote: boolean;
            mentionLimit: number;
            canInvite: boolean;
            canImportNotes: boolean;
            inviteLimit: number;
            inviteLimitCycle: number;
            inviteExpirationTime: number;
            canManageCustomEmojis: boolean;
            canManageAvatarDecorations: boolean;
            canSearchNotes: boolean;
            canSearchUsers: boolean;
            canUseTranslator: boolean;
            canHideAds: boolean;
            driveCapacityMb: number;
            maxFileSizeMb: number;
            uploadableFileTypes: string[];
            alwaysMarkNsfw: boolean;
            canUpdateBioMedia: boolean;
            pinLimit: number;
            antennaLimit: number;
            wordMuteLimit: number;
            webhookLimit: number;
            clipLimit: number;
            noteEachClipsLimit: number;
            userListLimit: number;
            userEachUserListsLimit: number;
            rateLimitFactor: number;
            avatarDecorationLimit: number;
            canFollow: boolean;
            canFollowed: boolean;
            canImportAntennas: boolean;
            canImportBlocking: boolean;
            canImportFollowing: boolean;
            canImportMuting: boolean;
            canImportUserLists: boolean;
            scheduleNoteMax: number;
            /** @enum {string} */
            chatAvailability: 'available' | 'readonly' | 'unavailable';
            canUseQuoteNotification: boolean;
            canUseUnFollowNotification: boolean;
            canUseBlockedNotification: boolean;
            canUseUnBlockedNotification: boolean;
            canViewCharts: boolean;
        };
        ReversiGameLite: {
            /** Format: id */
            id: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            startedAt: string | null;
            /** Format: date-time */
            endedAt: string | null;
            isStarted: boolean;
            isEnded: boolean;
            /** Format: id */
            user1Id: string;
            /** Format: id */
            user2Id: string;
            user1: components['schemas']['UserLite'];
            user2: components['schemas']['UserLite'];
            /** Format: id */
            winnerId: string | null;
            winner: components['schemas']['UserLite'] | null;
            /** Format: id */
            surrenderedUserId: string | null;
            /** Format: id */
            timeoutUserId: string | null;
            black: number | null;
            bw: string;
            noIrregularRules: boolean;
            isLlotheo: boolean;
            canPutEverywhere: boolean;
            loopedBoard: boolean;
            timeLimitForEachTurn: number;
        };
        ReversiGameDetailed: {
            /** Format: id */
            id: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            startedAt: string | null;
            /** Format: date-time */
            endedAt: string | null;
            isStarted: boolean;
            isEnded: boolean;
            form1: Record<string, never> | null;
            form2: Record<string, never> | null;
            user1Ready: boolean;
            user2Ready: boolean;
            /** Format: id */
            user1Id: string;
            /** Format: id */
            user2Id: string;
            user1: components['schemas']['UserLite'];
            user2: components['schemas']['UserLite'];
            /** Format: id */
            winnerId: string | null;
            winner: components['schemas']['UserLite'] | null;
            /** Format: id */
            surrenderedUserId: string | null;
            /** Format: id */
            timeoutUserId: string | null;
            black: number | null;
            bw: string;
            noIrregularRules: boolean;
            isLlotheo: boolean;
            canPutEverywhere: boolean;
            loopedBoard: boolean;
            timeLimitForEachTurn: number;
            logs: number[][];
            map: string[];
        };
        MetaLite: {
            maintainerName: string | null;
            maintainerEmail: string | null;
            version: string;
            providesTarball: boolean;
            name: string | null;
            shortName: string | null;
            /**
             * Format: url
             * @example https://misskey.example.com
             */
            uri: string;
            description: string | null;
            langs: string[];
            tosUrl: string | null;
            /** @default https://github.com/misskey-dev/misskey */
            repositoryUrl: string | null;
            /** @default https://github.com/misskey-dev/misskey/issues/new */
            feedbackUrl: string | null;
            defaultDarkTheme: string | null;
            defaultLightTheme: string | null;
            disableRegistration: boolean;
            emailRequiredForSignup: boolean;
            emailInquiredForSignup: boolean;
            /** @default false */
            approvalRequiredForSignup: boolean;
            enableHcaptcha: boolean;
            hcaptchaSiteKey: string | null;
            enableMcaptcha: boolean;
            mcaptchaSiteKey: string | null;
            mcaptchaInstanceUrl: string | null;
            enableRecaptcha: boolean;
            recaptchaSiteKey: string | null;
            enableTurnstile: boolean;
            turnstileSiteKey: string | null;
            enableTestcaptcha: boolean;
            googleAnalyticsMeasurementId: string | null;
            swPublickey: string | null;
            /** @default /assets/ai.png */
            mascotImageUrl: string;
            bannerUrl: string | null;
            serverErrorImageUrl: string | null;
            infoImageUrl: string | null;
            notFoundImageUrl: string | null;
            iconUrl: string | null;
            maxNoteTextLength: number;
            ads: {
                /**
                 * Format: id
                 * @example xxxxxxxxxx
                 */
                id: string;
                /** Format: url */
                url: string;
                place: string;
                ratio: number;
                /** Format: url */
                imageUrl: string;
                dayOfWeek: number;
            }[];
            /** @default 0 */
            notesPerOneAd: number;
            enableEmail: boolean;
            enableServiceWorker: boolean;
            translatorAvailable: boolean;
            sentryForFrontend: {
                options: {
                    dsn: string;
                } & {
                    [key: string]: unknown;
                };
                vueIntegration?: {
                    [key: string]: unknown;
                } | null;
                browserTracingIntegration?: {
                    [key: string]: unknown;
                } | null;
                replayIntegration?: {
                    [key: string]: unknown;
                } | null;
            } | null;
            mediaProxy: string;
            enableUrlPreview: boolean;
            backgroundImageUrl: string | null;
            impressumUrl: string | null;
            logoImageUrl: string | null;
            privacyPolicyUrl: string | null;
            inquiryUrl: string | null;
            serverRules: string[];
            themeColor: string | null;
            policies: components['schemas']['RolePolicies'];
            /**
             * @default local
             * @enum {string}
             */
            noteSearchableScope: 'local' | 'global';
            reversiVersion: string;
            /** @default false */
            yamiNoteFederationEnabled: boolean;
            /** @default [] */
            yamiNoteFederationTrustedInstances: string[];
            maxFileSize: number;
            /** @enum {string} */
            federation: 'all' | 'specified' | 'none';
        };
        MetaDetailedOnly: {
            features?: {
                registration: boolean;
                emailRequiredForSignup: boolean;
                emailInquiredForSignup: boolean;
                localTimeline: boolean;
                globalTimeline: boolean;
                yamiTimeline: boolean;
                hcaptcha: boolean;
                turnstile: boolean;
                recaptcha: boolean;
                objectStorage: boolean;
                serviceWorker: boolean;
                /** @default true */
                miauth: boolean;
            };
            proxyAccountName: string | null;
            /** @example false */
            requireSetup: boolean;
            cacheRemoteFiles: boolean;
            cacheRemoteSensitiveFiles: boolean;
        };
        MetaDetailed: components['schemas']['MetaLite'] & components['schemas']['MetaDetailedOnly'];
        SystemWebhook: {
            id: string;
            isActive: boolean;
            /** Format: date-time */
            updatedAt: string;
            /** Format: date-time */
            latestSentAt: string | null;
            latestStatus: number | null;
            name: string;
            on: ('abuseReport' | 'abuseReportResolved' | 'userCreated' | 'inactiveModeratorsWarning' | 'inactiveModeratorsInvitationOnlyChanged')[];
            url: string;
            secret: string;
        };
        AbuseReportNotificationRecipient: {
            id: string;
            isActive: boolean;
            /** Format: date-time */
            updatedAt: string;
            name: string;
            /** @enum {string} */
            method: 'email' | 'webhook';
            userId?: string;
            user?: components['schemas']['UserLite'];
            systemWebhookId?: string;
            systemWebhook?: components['schemas']['SystemWebhook'];
        };
        ChatMessage: {
            id: string;
            /** Format: date-time */
            createdAt: string;
            fromUserId: string;
            fromUser: components['schemas']['UserLite'];
            toUserId?: string | null;
            toUser?: components['schemas']['UserLite'] | null;
            toRoomId?: string | null;
            toRoom?: components['schemas']['ChatRoom'] | null;
            text?: string | null;
            fileId?: string | null;
            file?: components['schemas']['DriveFile'] | null;
            isRead?: boolean;
            reactions: {
                reaction: string;
                user: components['schemas']['UserLite'];
            }[];
        };
        ChatMessageLite: {
            id: string;
            /** Format: date-time */
            createdAt: string;
            fromUserId: string;
            fromUser?: components['schemas']['UserLite'];
            toUserId?: string | null;
            toRoomId?: string | null;
            text?: string | null;
            fileId?: string | null;
            file?: components['schemas']['DriveFile'] | null;
            reactions: {
                reaction: string;
                user?: components['schemas']['UserLite'] | null;
            }[];
        };
        ChatMessageLiteFor1on1: {
            id: string;
            /** Format: date-time */
            createdAt: string;
            fromUserId: string;
            toUserId: string;
            text?: string | null;
            fileId?: string | null;
            file?: components['schemas']['DriveFile'] | null;
            reactions: {
                reaction: string;
            }[];
        };
        ChatMessageLiteForRoom: {
            id: string;
            /** Format: date-time */
            createdAt: string;
            fromUserId: string;
            fromUser: components['schemas']['UserLite'];
            toRoomId: string;
            text?: string | null;
            fileId?: string | null;
            file?: components['schemas']['DriveFile'] | null;
            reactions: {
                reaction: string;
                user: components['schemas']['UserLite'];
            }[];
        };
        ChatRoom: {
            id: string;
            /** Format: date-time */
            createdAt: string;
            ownerId: string;
            owner: components['schemas']['UserLite'];
            name: string;
            description: string;
            isMuted?: boolean;
            invitationExists?: boolean;
        };
        ChatRoomInvitation: {
            id: string;
            /** Format: date-time */
            createdAt: string;
            userId: string;
            user: components['schemas']['UserLite'];
            roomId: string;
            room: components['schemas']['ChatRoom'];
        };
        ChatRoomMembership: {
            id: string;
            /** Format: date-time */
            createdAt: string;
            userId: string;
            user?: components['schemas']['UserLite'];
            roomId: string;
            room?: components['schemas']['ChatRoom'];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
};
export type $defs = Record<string, never>;
export interface operations {
    'admin___abuse-report___notification-recipient___create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    isActive: boolean;
                    name: string;
                    /** @enum {string} */
                    method: 'email' | 'webhook';
                    /** Format: misskey:id */
                    userId?: string;
                    /** Format: misskey:id */
                    systemWebhookId?: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AbuseReportNotificationRecipient'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___abuse-report___notification-recipient___delete': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    id: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___abuse-report___notification-recipient___list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    method?: ('email' | 'webhook')[];
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AbuseReportNotificationRecipient'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___abuse-report___notification-recipient___show': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    id: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AbuseReportNotificationRecipient'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___abuse-report___notification-recipient___update': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    id: string;
                    isActive: boolean;
                    name: string;
                    /** @enum {string} */
                    method: 'email' | 'webhook';
                    /** Format: misskey:id */
                    userId?: string;
                    /** Format: misskey:id */
                    systemWebhookId?: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AbuseReportNotificationRecipient'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___abuse-user-reports': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default 10 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                    /** @default null */
                    state?: string | null;
                    /**
                     * @default combined
                     * @enum {string}
                     */
                    reporterOrigin?: 'combined' | 'local' | 'remote';
                    /**
                     * @default combined
                     * @enum {string}
                     */
                    targetUserOrigin?: 'combined' | 'local' | 'remote';
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /**
                         * Format: id
                         * @example xxxxxxxxxx
                         */
                        id: string;
                        /** Format: date-time */
                        createdAt: string;
                        comment: string;
                        /** @example false */
                        resolved: boolean;
                        /** Format: id */
                        reporterId: string;
                        /** Format: id */
                        targetUserId: string;
                        /** Format: id */
                        assigneeId: string | null;
                        reporter: components['schemas']['UserDetailedNotMe'];
                        targetUser: components['schemas']['UserDetailedNotMe'];
                        assignee: components['schemas']['UserDetailedNotMe'] | null;
                        forwarded: boolean;
                        /** @enum {string|null} */
                        resolvedAs: 'accept' | 'reject' | null;
                        moderationNote: string;
                    }[];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    admin___accounts___create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    username: string;
                    password: string;
                    setupPassword?: string | null;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['MeDetailed'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    admin___accounts___delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    userId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___accounts___find-by-email': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    email: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['UserDetailedNotMe'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    admin___ad___create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    url: string;
                    memo: string;
                    place: string;
                    priority: string;
                    ratio: number;
                    expiresAt: number;
                    startsAt: number;
                    imageUrl: string;
                    dayOfWeek: number;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Ad'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    admin___ad___delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    id: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    admin___ad___list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default 10 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                    /** @default null */
                    publishing?: boolean | null;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Ad'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    admin___ad___update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    id: string;
                    memo?: string;
                    url?: string;
                    imageUrl?: string;
                    place?: string;
                    priority?: string;
                    ratio?: number;
                    expiresAt?: number;
                    startsAt?: number;
                    dayOfWeek?: number;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    admin___announcements___create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    title: string;
                    text: string;
                    imageUrl: string | null;
                    /**
                     * @default info
                     * @enum {string}
                     */
                    icon?: 'info' | 'warning' | 'error' | 'success';
                    /**
                     * @default normal
                     * @enum {string}
                     */
                    display?: 'normal' | 'banner' | 'dialog';
                    /** @default false */
                    forExistingUsers?: boolean;
                    /** @default false */
                    silence?: boolean;
                    /** @default false */
                    needConfirmationToRead?: boolean;
                    /**
                     * Format: misskey:id
                     * @default null
                     */
                    userId?: string | null;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /**
                         * Format: id
                         * @example xxxxxxxxxx
                         */
                        id: string;
                        /** Format: date-time */
                        createdAt: string;
                        /** Format: date-time */
                        updatedAt: string | null;
                        title: string;
                        text: string;
                        imageUrl: string | null;
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    admin___announcements___delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    id: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    admin___announcements___list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default 10 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                    /** Format: misskey:id */
                    userId?: string | null;
                    /**
                     * @default active
                     * @enum {string}
                     */
                    status?: 'all' | 'active' | 'archived';
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /**
                         * Format: id
                         * @example xxxxxxxxxx
                         */
                        id: string;
                        /** Format: date-time */
                        createdAt: string;
                        /** Format: date-time */
                        updatedAt: string | null;
                        text: string;
                        title: string;
                        imageUrl: string | null;
                        reads: number;
                    }[];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    admin___announcements___update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    id: string;
                    title?: string;
                    text?: string;
                    imageUrl?: string | null;
                    /** @enum {string} */
                    icon?: 'info' | 'warning' | 'error' | 'success';
                    /** @enum {string} */
                    display?: 'normal' | 'banner' | 'dialog';
                    forExistingUsers?: boolean;
                    silence?: boolean;
                    needConfirmationToRead?: boolean;
                    isActive?: boolean;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___approve-user': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    userId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___avatar-decorations___create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    name: string;
                    description: string;
                    url: string;
                    roleIdsThatCanBeUsedThisDecoration?: string[];
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** Format: id */
                        id: string;
                        /** Format: date-time */
                        createdAt: string;
                        /** Format: date-time */
                        updatedAt: string | null;
                        name: string;
                        description: string;
                        url: string;
                        roleIdsThatCanBeUsedThisDecoration: string[];
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___avatar-decorations___delete': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    id: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___avatar-decorations___list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default 10 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                    /** Format: misskey:id */
                    userId?: string | null;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /**
                         * Format: id
                         * @example xxxxxxxxxx
                         */
                        id: string;
                        /** Format: date-time */
                        createdAt: string;
                        /** Format: date-time */
                        updatedAt: string | null;
                        name: string;
                        description: string;
                        url: string;
                        roleIdsThatCanBeUsedThisDecoration: string[];
                    }[];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___avatar-decorations___update': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    id: string;
                    name?: string;
                    description?: string;
                    url?: string;
                    roleIdsThatCanBeUsedThisDecoration?: string[];
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    admin___captcha___current: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {string} */
                        provider: 'none' | 'hcaptcha' | 'mcaptcha' | 'recaptcha' | 'turnstile' | 'testcaptcha';
                        hcaptcha: {
                            siteKey: string | null;
                            secretKey: string | null;
                        };
                        mcaptcha: {
                            siteKey: string | null;
                            secretKey: string | null;
                            instanceUrl: string | null;
                        };
                        recaptcha: {
                            siteKey: string | null;
                            secretKey: string | null;
                        };
                        turnstile: {
                            siteKey: string | null;
                            secretKey: string | null;
                        };
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    admin___captcha___save: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @enum {string} */
                    provider: 'none' | 'hcaptcha' | 'mcaptcha' | 'recaptcha' | 'turnstile' | 'testcaptcha';
                    captchaResult?: string | null;
                    sitekey?: string | null;
                    secret?: string | null;
                    instanceUrl?: string | null;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___delete-account': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    userId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___delete-all-files-of-a-user': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    userId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___drive___clean-remote-files': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    admin___drive___cleanup: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    admin___drive___files: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default 10 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                    /** Format: misskey:id */
                    userId?: string | null;
                    type?: string | null;
                    /**
                     * @default local
                     * @enum {string}
                     */
                    origin?: 'combined' | 'local' | 'remote';
                    /**
                     * @description The local host is represented with `null`.
                     * @default null
                     */
                    hostname?: string | null;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['DriveFile'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___drive___show-file': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    fileId: string;
                } | {
                    url: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /**
                         * Format: id
                         * @example xxxxxxxxxx
                         */
                        id: string;
                        /** Format: date-time */
                        createdAt: string;
                        /**
                         * Format: id
                         * @example xxxxxxxxxx
                         */
                        userId: string | null;
                        /** @description The local host is represented with `null`. */
                        userHost: string | null;
                        /**
                         * Format: md5
                         * @example 15eca7fba0480996e2245f5185bf39f2
                         */
                        md5: string;
                        /** @example 192.jpg */
                        name: string;
                        /** @example image/jpeg */
                        type: string;
                        /** @example 51469 */
                        size: number;
                        comment: string | null;
                        blurhash: string | null;
                        properties: {
                            width?: number;
                            height?: number;
                            orientation?: number;
                            avgColor?: string;
                        };
                        /** @example true */
                        storedInternal: boolean | null;
                        /** Format: url */
                        url: string | null;
                        /** Format: url */
                        thumbnailUrl: string | null;
                        /** Format: url */
                        webpublicUrl: string | null;
                        accessKey: string | null;
                        thumbnailAccessKey: string | null;
                        webpublicAccessKey: string | null;
                        uri: string | null;
                        src: string | null;
                        /**
                         * Format: id
                         * @example xxxxxxxxxx
                         */
                        folderId: string | null;
                        isSensitive: boolean;
                        isLink: boolean;
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    admin___emoji___add: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    name: string;
                    /** Format: misskey:id */
                    fileId: string;
                    /** @description Use `null` to reset the category. */
                    category?: string | null;
                    aliases?: string[];
                    license?: string | null;
                    isSensitive?: boolean;
                    localOnly?: boolean;
                    roleIdsThatCanBeUsedThisEmojiAsReaction?: string[];
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['EmojiDetailed'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___emoji___add-aliases-bulk': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    ids: string[];
                    aliases: string[];
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    admin___emoji___copy: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    emojiId: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** Format: id */
                        id: string;
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    admin___emoji___delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    id: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___emoji___delete-bulk': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    ids: string[];
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___emoji___import-zip': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    fileId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    admin___emoji___list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default null */
                    query?: string | null;
                    /** @default 10 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** Format: id */
                        id: string;
                        aliases: string[];
                        name: string;
                        category: string | null;
                        /** @description The local host is represented with `null`. The field exists for compatibility with other API endpoints that return files. */
                        host: string | null;
                        url: string;
                    }[];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___emoji___list-remote': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default null */
                    query?: string | null;
                    /**
                     * @description Use `null` to represent the local host.
                     * @default null
                     */
                    host?: string | null;
                    /** @default 10 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** Format: id */
                        id: string;
                        aliases: string[];
                        name: string;
                        category: string | null;
                        /** @description The local host is represented with `null`. */
                        host: string | null;
                        url: string;
                    }[];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___emoji___remove-aliases-bulk': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    ids: string[];
                    aliases: string[];
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___emoji___set-aliases-bulk': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    ids: string[];
                    aliases: string[];
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___emoji___set-category-bulk': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    ids: string[];
                    /** @description Use `null` to reset the category. */
                    category?: string | null;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___emoji___set-license-bulk': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    ids: string[];
                    /** @description Use `null` to reset the license. */
                    license?: string | null;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    admin___emoji___update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': ({
                    /** Format: misskey:id */
                    id: string;
                } | {
                    name: string;
                }) & {
                    /** Format: misskey:id */
                    fileId?: string;
                    /** @description Use `null` to reset the category. */
                    category?: string | null;
                    aliases?: string[];
                    license?: string | null;
                    isSensitive?: boolean;
                    localOnly?: boolean;
                    roleIdsThatCanBeUsedThisEmojiAsReaction?: string[];
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___federation___delete-all-files': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    host: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___federation___refresh-remote-instance-metadata': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    host: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___federation___remove-all-following': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    host: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___federation___update-instance': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    host: string;
                    isSuspended?: boolean;
                    moderationNote?: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___forward-abuse-user-report': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    reportId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___get-index-stats': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        tablename: string;
                        indexname: string;
                    }[];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___get-table-stats': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        [key: string]: {
                            count: number;
                            size: number;
                        };
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___get-user-ips': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    userId: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        ip: string;
                        /** Format: date-time */
                        createdAt: string;
                    }[];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    admin___invite___create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default 1 */
                    count?: number;
                    expiresAt?: string | null;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['InviteCode'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    admin___invite___list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default 30 */
                    limit?: number;
                    /** @default 0 */
                    offset?: number;
                    /**
                     * @default all
                     * @enum {string}
                     */
                    type?: 'unused' | 'used' | 'expired' | 'all';
                    /** @enum {string} */
                    sort?: '+createdAt' | '-createdAt' | '+usedAt' | '-usedAt';
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['InviteCode'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    admin___meta: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        cacheRemoteFiles: boolean;
                        cacheRemoteSensitiveFiles: boolean;
                        emailRequiredForSignup: boolean;
                        emailInquiredForSignup: boolean;
                        approvalRequiredForSignup: boolean;
                        enableHcaptcha: boolean;
                        hcaptchaSiteKey: string | null;
                        enableMcaptcha: boolean;
                        mcaptchaSiteKey: string | null;
                        mcaptchaInstanceUrl: string | null;
                        enableRecaptcha: boolean;
                        recaptchaSiteKey: string | null;
                        enableTurnstile: boolean;
                        turnstileSiteKey: string | null;
                        enableTestcaptcha: boolean;
                        googleAnalyticsMeasurementId: string | null;
                        swPublickey: string | null;
                        /** @default /assets/ai.png */
                        mascotImageUrl: string | null;
                        bannerUrl: string | null;
                        serverErrorImageUrl: string | null;
                        infoImageUrl: string | null;
                        notFoundImageUrl: string | null;
                        iconUrl: string | null;
                        app192IconUrl: string | null;
                        app512IconUrl: string | null;
                        enableEmail: boolean;
                        enableServiceWorker: boolean;
                        translatorAvailable: boolean;
                        silencedHosts?: string[];
                        mediaSilencedHosts: string[];
                        pinnedUsers: string[];
                        hiddenTags: string[];
                        blockedHosts: string[];
                        sensitiveWords: string[];
                        prohibitedWords: string[];
                        prohibitedWordsForNameOfUser: string[];
                        bannedEmailDomains?: string[];
                        preservedUsernames: string[];
                        hcaptchaSecretKey: string | null;
                        mcaptchaSecretKey: string | null;
                        recaptchaSecretKey: string | null;
                        turnstileSecretKey: string | null;
                        sensitiveMediaDetection: string;
                        sensitiveMediaDetectionSensitivity: string;
                        setSensitiveFlagAutomatically: boolean;
                        enableSensitiveMediaDetectionForVideos: boolean;
                        /** Format: id */
                        proxyAccountId: string;
                        email: string | null;
                        smtpSecure: boolean;
                        smtpHost: string | null;
                        smtpPort: number | null;
                        smtpUser: string | null;
                        smtpPass: string | null;
                        swPrivateKey: string | null;
                        useObjectStorage: boolean;
                        objectStorageBaseUrl: string | null;
                        objectStorageBucket: string | null;
                        objectStoragePrefix: string | null;
                        objectStorageEndpoint: string | null;
                        objectStorageRegion: string | null;
                        objectStoragePort: number | null;
                        objectStorageAccessKey: string | null;
                        objectStorageSecretKey: string | null;
                        objectStorageUseSSL: boolean;
                        objectStorageUseProxy: boolean;
                        objectStorageSetPublicRead: boolean;
                        enableIpLogging: boolean;
                        enableActiveEmailValidation: boolean;
                        enableVerifymailApi: boolean;
                        verifymailAuthKey: string | null;
                        enableTruemailApi: boolean;
                        truemailInstance: string | null;
                        truemailAuthKey: string | null;
                        enableChartsForRemoteUser: boolean;
                        enableChartsForFederatedInstances: boolean;
                        enableStatsForFederatedInstances: boolean;
                        enableServerMachineStats: boolean;
                        enableIdenticonGeneration: boolean;
                        manifestJsonOverride: string;
                        policies: Record<string, never>;
                        enableFanoutTimeline: boolean;
                        enableFanoutTimelineDbFallback: boolean;
                        perLocalUserUserTimelineCacheMax: number;
                        perRemoteUserUserTimelineCacheMax: number;
                        perUserHomeTimelineCacheMax: number;
                        perUserListTimelineCacheMax: number;
                        enableReactionsBuffering: boolean;
                        notesPerOneAd: number;
                        backgroundImageUrl: string | null;
                        deeplAuthKey: string | null;
                        deeplIsPro: boolean;
                        defaultDarkTheme: string | null;
                        defaultLightTheme: string | null;
                        description: string | null;
                        disableRegistration: boolean;
                        impressumUrl: string | null;
                        maintainerEmail: string | null;
                        maintainerName: string | null;
                        name: string | null;
                        shortName: string | null;
                        objectStorageS3ForcePathStyle: boolean;
                        privacyPolicyUrl: string | null;
                        inquiryUrl: string | null;
                        repositoryUrl: string | null;
                        /**
                         * @deprecated
                         * @description [Deprecated] Use "urlPreviewSummaryProxyUrl" instead.
                         */
                        summalyProxy: string | null;
                        themeColor: string | null;
                        tosUrl: string | null;
                        uri: string;
                        version: string;
                        urlPreviewEnabled: boolean;
                        urlPreviewAllowRedirect: boolean;
                        urlPreviewTimeout: number;
                        urlPreviewMaximumContentLength: number;
                        urlPreviewRequireContentLength: boolean;
                        urlPreviewUserAgent: string | null;
                        urlPreviewSummaryProxyUrl: string | null;
                        /** @enum {string} */
                        federation: 'all' | 'specified' | 'none';
                        federationHosts: string[];
                        yamiNoteFederationEnabled: boolean;
                        yamiNoteFederationTrustedInstances: string[];
                        deliverSuspendedSoftware: {
                            software: string;
                            versionRange: string;
                        }[];
                        singleUserMode: boolean;
                        /** @enum {string} */
                        ugcVisibilityForVisitor: 'all' | 'local' | 'none';
                        proxyRemoteFiles: boolean;
                        signToActivityPubGet: boolean;
                        allowExternalApRedirect: boolean;
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    admin___promo___create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    noteId: string;
                    expiresAt: number;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    admin___queue___clear: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @enum {string} */
                    queue: 'system' | 'endedPollNotification' | 'deliver' | 'inbox' | 'db' | 'relationship' | 'objectStorage' | 'userWebhookDeliver' | 'systemWebhookDeliver';
                    /** @enum {string} */
                    state: '*' | 'completed' | 'wait' | 'active' | 'paused' | 'prioritized' | 'delayed' | 'failed';
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___queue___deliver-delayed': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': [
                        string,
                        number,
                    ][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___queue___inbox-delayed': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': [
                        string,
                        number,
                    ][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    admin___queue___jobs: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @enum {string} */
                    queue: 'system' | 'endedPollNotification' | 'deliver' | 'inbox' | 'db' | 'relationship' | 'objectStorage' | 'userWebhookDeliver' | 'systemWebhookDeliver';
                    state: ('active' | 'wait' | 'delayed' | 'completed' | 'failed' | 'paused')[];
                    search?: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['QueueJob'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___queue___promote-jobs': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @enum {string} */
                    queue: 'system' | 'endedPollNotification' | 'deliver' | 'inbox' | 'db' | 'relationship' | 'objectStorage' | 'userWebhookDeliver' | 'systemWebhookDeliver';
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___queue___queue-stats': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @enum {string} */
                    queue: 'system' | 'endedPollNotification' | 'deliver' | 'inbox' | 'db' | 'relationship' | 'objectStorage' | 'userWebhookDeliver' | 'systemWebhookDeliver';
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {string} */
                        name: 'system' | 'endedPollNotification' | 'deliver' | 'inbox' | 'db' | 'relationship' | 'objectStorage' | 'userWebhookDeliver' | 'systemWebhookDeliver';
                        qualifiedName: string;
                        counts: {
                            [key: string]: number;
                        };
                        isPaused: boolean;
                        metrics: {
                            completed: components['schemas']['QueueMetrics'];
                            failed: components['schemas']['QueueMetrics'];
                        };
                        db: {
                            version: string;
                            /** @enum {string} */
                            mode: 'cluster' | 'standalone' | 'sentinel';
                            runId: string;
                            processId: string;
                            port: number;
                            os: string;
                            uptime: number;
                            memory: {
                                total: number;
                                used: number;
                                fragmentationRatio: number;
                                peak: number;
                            };
                            clients: {
                                blocked: number;
                                connected: number;
                            };
                        };
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    admin___queue___queues: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {string} */
                        name: 'system' | 'endedPollNotification' | 'deliver' | 'inbox' | 'db' | 'relationship' | 'objectStorage' | 'userWebhookDeliver' | 'systemWebhookDeliver';
                        counts: {
                            [key: string]: number;
                        };
                        isPaused: boolean;
                        metrics: {
                            completed: components['schemas']['QueueMetrics'];
                            failed: components['schemas']['QueueMetrics'];
                        };
                    }[];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___queue___remove-job': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @enum {string} */
                    queue: 'system' | 'endedPollNotification' | 'deliver' | 'inbox' | 'db' | 'relationship' | 'objectStorage' | 'userWebhookDeliver' | 'systemWebhookDeliver';
                    jobId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___queue___retry-job': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @enum {string} */
                    queue: 'system' | 'endedPollNotification' | 'deliver' | 'inbox' | 'db' | 'relationship' | 'objectStorage' | 'userWebhookDeliver' | 'systemWebhookDeliver';
                    jobId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___queue___show-job': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @enum {string} */
                    queue: 'system' | 'endedPollNotification' | 'deliver' | 'inbox' | 'db' | 'relationship' | 'objectStorage' | 'userWebhookDeliver' | 'systemWebhookDeliver';
                    jobId: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['QueueJob'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    admin___queue___stats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        deliver: components['schemas']['QueueCount'];
                        inbox: components['schemas']['QueueCount'];
                        db: components['schemas']['QueueCount'];
                        objectStorage: components['schemas']['QueueCount'];
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    admin___relays___add: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    inbox: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** Format: id */
                        id: string;
                        /** Format: url */
                        inbox: string;
                        /**
                         * @default requesting
                         * @enum {string}
                         */
                        status: 'requesting' | 'accepted' | 'rejected';
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    admin___relays___list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** Format: id */
                        id: string;
                        /** Format: url */
                        inbox: string;
                        /**
                         * @default requesting
                         * @enum {string}
                         */
                        status: 'requesting' | 'accepted' | 'rejected';
                    }[];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    admin___relays___remove: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    inbox: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___reset-password': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    userId: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        password: string;
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___resolve-abuse-user-report': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    reportId: string;
                    /** @enum {string|null} */
                    resolvedAs?: 'accept' | 'reject' | null;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    admin___roles___assign: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    roleId: string;
                    /** Format: misskey:id */
                    userId: string;
                    expiresAt?: number | null;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    admin___roles___create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    name: string;
                    description: string;
                    color: string | null;
                    iconUrl: string | null;
                    /** @enum {string} */
                    target: 'manual' | 'conditional';
                    condFormula: Record<string, never>;
                    isPublic: boolean;
                    /** @enum {string} */
                    permissionGroup: 'Admin' | 'MainModerator' | 'Normal' | 'Community';
                    /** @default false */
                    isExplorable?: boolean;
                    asBadge: boolean;
                    preserveAssignmentOnMoveAccount?: boolean;
                    canEditMembersByModerator: boolean;
                    displayOrder: number;
                    policies: Record<string, never>;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Role'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    admin___roles___delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    roleId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    admin___roles___list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Role'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    admin___roles___show: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    roleId: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Role'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    admin___roles___unassign: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    roleId: string;
                    /** Format: misskey:id */
                    userId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    admin___roles___update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    roleId: string;
                    name?: string;
                    description?: string;
                    color?: string | null;
                    iconUrl?: string | null;
                    /** @enum {string} */
                    target?: 'manual' | 'conditional';
                    condFormula?: Record<string, never>;
                    isPublic?: boolean;
                    /** @enum {string} */
                    permissionGroup?: 'Admin' | 'MainModerator' | 'Normal' | 'Community';
                    isExplorable?: boolean;
                    asBadge?: boolean;
                    preserveAssignmentOnMoveAccount?: boolean;
                    canEditMembersByModerator?: boolean;
                    displayOrder?: number;
                    policies?: Record<string, never>;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___roles___update-default-policies': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    policies: Record<string, never>;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    admin___roles___users: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    roleId: string;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                    /** @default 10 */
                    limit?: number;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** Format: misskey:id */
                        id: string;
                        /** Format: date-time */
                        createdAt: string;
                        user: components['schemas']['UserDetailed'];
                        /** Format: date-time */
                        expiresAt: string | null;
                    }[];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___send-email': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    to: string;
                    subject: string;
                    text: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___server-info': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        machine: string;
                        /** @example linux */
                        os: string;
                        node: string;
                        psql: string;
                        cpu: {
                            model: string;
                            cores: number;
                        };
                        mem: {
                            /** Format: bytes */
                            total: number;
                        };
                        fs: {
                            /** Format: bytes */
                            total: number;
                            /** Format: bytes */
                            used: number;
                        };
                        net: {
                            /** @example eth0 */
                            interface: string;
                        };
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___show-moderation-logs': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default 10 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                    type?: string | null;
                    /** Format: misskey:id */
                    userId?: string | null;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** Format: id */
                        id: string;
                        /** Format: date-time */
                        createdAt: string;
                        type: string;
                        info: Record<string, never>;
                        /** Format: id */
                        userId: string;
                        user: components['schemas']['UserDetailedNotMe'];
                    }[];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___show-user': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    userId: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        email: string | null;
                        emailVerified: boolean;
                        followedMessage: string | null;
                        autoAcceptFollowed: boolean;
                        noCrawle: boolean;
                        preventAiLearning: boolean;
                        alwaysMarkNsfw: boolean;
                        autoSensitive: boolean;
                        carefulBot: boolean;
                        injectFeaturedNote: boolean;
                        receiveAnnouncementEmail: boolean;
                        mutedWords: (string | string[])[];
                        mutedInstances: string[];
                        notificationRecieveConfig: {
                            note?: {
                                /** @enum {string} */
                                type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'followingOrFollower' | 'never';
                            } | {
                                /** @enum {string} */
                                type: 'list';
                                /** Format: misskey:id */
                                userListId: string;
                            };
                            follow?: {
                                /** @enum {string} */
                                type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'followingOrFollower' | 'never';
                            } | {
                                /** @enum {string} */
                                type: 'list';
                                /** Format: misskey:id */
                                userListId: string;
                            };
                            mention?: {
                                /** @enum {string} */
                                type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'followingOrFollower' | 'never';
                            } | {
                                /** @enum {string} */
                                type: 'list';
                                /** Format: misskey:id */
                                userListId: string;
                            };
                            reply?: {
                                /** @enum {string} */
                                type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'followingOrFollower' | 'never';
                            } | {
                                /** @enum {string} */
                                type: 'list';
                                /** Format: misskey:id */
                                userListId: string;
                            };
                            renote?: {
                                /** @enum {string} */
                                type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'followingOrFollower' | 'never';
                            } | {
                                /** @enum {string} */
                                type: 'list';
                                /** Format: misskey:id */
                                userListId: string;
                            };
                            quote?: {
                                /** @enum {string} */
                                type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'followingOrFollower' | 'never';
                            } | {
                                /** @enum {string} */
                                type: 'list';
                                /** Format: misskey:id */
                                userListId: string;
                            };
                            reaction?: {
                                /** @enum {string} */
                                type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'followingOrFollower' | 'never';
                            } | {
                                /** @enum {string} */
                                type: 'list';
                                /** Format: misskey:id */
                                userListId: string;
                            };
                            pollEnded?: {
                                /** @enum {string} */
                                type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'followingOrFollower' | 'never';
                            } | {
                                /** @enum {string} */
                                type: 'list';
                                /** Format: misskey:id */
                                userListId: string;
                            };
                            blocked?: {
                                /** @enum {string} */
                                type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'followingOrFollower' | 'never';
                            } | {
                                /** @enum {string} */
                                type: 'list';
                                /** Format: misskey:id */
                                userListId: string;
                            };
                            unblocked?: {
                                /** @enum {string} */
                                type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'followingOrFollower' | 'never';
                            } | {
                                /** @enum {string} */
                                type: 'list';
                                /** Format: misskey:id */
                                userListId: string;
                            };
                            receiveFollowRequest?: {
                                /** @enum {string} */
                                type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'followingOrFollower' | 'never';
                            } | {
                                /** @enum {string} */
                                type: 'list';
                                /** Format: misskey:id */
                                userListId: string;
                            };
                            followRequestAccepted?: {
                                /** @enum {string} */
                                type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'followingOrFollower' | 'never';
                            } | {
                                /** @enum {string} */
                                type: 'list';
                                /** Format: misskey:id */
                                userListId: string;
                            };
                            roleAssigned?: {
                                /** @enum {string} */
                                type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'followingOrFollower' | 'never';
                            } | {
                                /** @enum {string} */
                                type: 'list';
                                /** Format: misskey:id */
                                userListId: string;
                            };
                            chatRoomInvitationReceived?: {
                                /** @enum {string} */
                                type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'followingOrFollower' | 'never';
                            } | {
                                /** @enum {string} */
                                type: 'list';
                                /** Format: misskey:id */
                                userListId: string;
                            };
                            achievementEarned?: {
                                /** @enum {string} */
                                type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'followingOrFollower' | 'never';
                            } | {
                                /** @enum {string} */
                                type: 'list';
                                /** Format: misskey:id */
                                userListId: string;
                            };
                            app?: {
                                /** @enum {string} */
                                type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'followingOrFollower' | 'never';
                            } | {
                                /** @enum {string} */
                                type: 'list';
                                /** Format: misskey:id */
                                userListId: string;
                            };
                            test?: {
                                /** @enum {string} */
                                type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'followingOrFollower' | 'never';
                            } | {
                                /** @enum {string} */
                                type: 'list';
                                /** Format: misskey:id */
                                userListId: string;
                            };
                        };
                        isModerator: boolean;
                        isSilenced: boolean;
                        isSuspended: boolean;
                        isHibernated: boolean;
                        lastActiveDate: string | null;
                        moderationNote: string;
                        signins: components['schemas']['Signin'][];
                        policies: components['schemas']['RolePolicies'];
                        roles: components['schemas']['Role'][];
                        roleAssigns: {
                            createdAt: string;
                            expiresAt: string | null;
                            roleId: string;
                        }[];
                        signupReason: string | null;
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___show-users': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default 10 */
                    limit?: number;
                    /** @default 0 */
                    offset?: number;
                    /** @enum {string} */
                    sort?: '+follower' | '-follower' | '+createdAt' | '-createdAt' | '+updatedAt' | '-updatedAt' | '+lastActiveDate' | '-lastActiveDate';
                    /**
                     * @default all
                     * @enum {string}
                     */
                    state?: 'all' | 'alive' | 'available' | 'admin' | 'moderator' | 'adminOrModerator' | 'suspended' | 'pending' | 'approved';
                    /**
                     * @default combined
                     * @enum {string}
                     */
                    origin?: 'combined' | 'local' | 'remote';
                    /** @default null */
                    username?: string | null;
                    /**
                     * @description The local host is represented with `null`.
                     * @default null
                     */
                    hostname?: string | null;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['UserDetailed'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___suspend-user': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    userId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___system-webhook___create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    isActive: boolean;
                    name: string;
                    on: ('abuseReport' | 'abuseReportResolved' | 'userCreated' | 'inactiveModeratorsWarning' | 'inactiveModeratorsInvitationOnlyChanged')[];
                    url: string;
                    secret: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SystemWebhook'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___system-webhook___delete': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    id: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___system-webhook___list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    isActive?: boolean;
                    on?: ('abuseReport' | 'abuseReportResolved' | 'userCreated' | 'inactiveModeratorsWarning' | 'inactiveModeratorsInvitationOnlyChanged')[];
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SystemWebhook'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___system-webhook___show': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    id: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SystemWebhook'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___system-webhook___test': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    webhookId: string;
                    /** @enum {string} */
                    type: 'abuseReport' | 'abuseReportResolved' | 'userCreated' | 'inactiveModeratorsWarning' | 'inactiveModeratorsInvitationOnlyChanged';
                    override?: {
                        url?: string;
                        secret?: string;
                    };
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___system-webhook___update': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    id: string;
                    isActive: boolean;
                    name: string;
                    on: ('abuseReport' | 'abuseReportResolved' | 'userCreated' | 'inactiveModeratorsWarning' | 'inactiveModeratorsInvitationOnlyChanged')[];
                    url: string;
                    secret: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SystemWebhook'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___unset-user-avatar': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    userId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___unset-user-banner': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    userId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___unsuspend-user': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    userId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___update-abuse-user-report': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    reportId: string;
                    moderationNote?: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___update-meta': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    disableRegistration?: boolean | null;
                    pinnedUsers?: string[] | null;
                    hiddenTags?: string[] | null;
                    blockedHosts?: string[] | null;
                    sensitiveWords?: string[] | null;
                    prohibitedWords?: string[] | null;
                    prohibitedWordsForNameOfUser?: string[] | null;
                    themeColor?: string | null;
                    mascotImageUrl?: string | null;
                    bannerUrl?: string | null;
                    serverErrorImageUrl?: string | null;
                    infoImageUrl?: string | null;
                    notFoundImageUrl?: string | null;
                    iconUrl?: string | null;
                    app192IconUrl?: string | null;
                    app512IconUrl?: string | null;
                    backgroundImageUrl?: string | null;
                    logoImageUrl?: string | null;
                    name?: string | null;
                    shortName?: string | null;
                    description?: string | null;
                    defaultLightTheme?: string | null;
                    defaultDarkTheme?: string | null;
                    cacheRemoteFiles?: boolean;
                    cacheRemoteSensitiveFiles?: boolean;
                    emailRequiredForSignup?: boolean;
                    emailInquiredForSignup?: boolean;
                    approvalRequiredForSignup?: boolean;
                    enableHcaptcha?: boolean;
                    hcaptchaSiteKey?: string | null;
                    hcaptchaSecretKey?: string | null;
                    enableMcaptcha?: boolean;
                    mcaptchaSiteKey?: string | null;
                    mcaptchaInstanceUrl?: string | null;
                    mcaptchaSecretKey?: string | null;
                    enableRecaptcha?: boolean;
                    recaptchaSiteKey?: string | null;
                    recaptchaSecretKey?: string | null;
                    enableTurnstile?: boolean;
                    turnstileSiteKey?: string | null;
                    turnstileSecretKey?: string | null;
                    enableTestcaptcha?: boolean;
                    googleAnalyticsMeasurementId?: string | null;
                    /** @enum {string} */
                    sensitiveMediaDetection?: 'none' | 'all' | 'local' | 'remote';
                    /** @enum {string} */
                    sensitiveMediaDetectionSensitivity?: 'medium' | 'low' | 'high' | 'veryLow' | 'veryHigh';
                    setSensitiveFlagAutomatically?: boolean;
                    enableSensitiveMediaDetectionForVideos?: boolean;
                    maintainerName?: string | null;
                    maintainerEmail?: string | null;
                    langs?: string[];
                    deeplAuthKey?: string | null;
                    deeplIsPro?: boolean;
                    enableEmail?: boolean;
                    email?: string | null;
                    smtpSecure?: boolean;
                    smtpHost?: string | null;
                    smtpPort?: number | null;
                    smtpUser?: string | null;
                    smtpPass?: string | null;
                    enableServiceWorker?: boolean;
                    swPublicKey?: string | null;
                    swPrivateKey?: string | null;
                    tosUrl?: string | null;
                    repositoryUrl?: string | null;
                    feedbackUrl?: string | null;
                    impressumUrl?: string | null;
                    privacyPolicyUrl?: string | null;
                    inquiryUrl?: string | null;
                    useObjectStorage?: boolean;
                    objectStorageBaseUrl?: string | null;
                    objectStorageBucket?: string | null;
                    objectStoragePrefix?: string | null;
                    objectStorageEndpoint?: string | null;
                    objectStorageRegion?: string | null;
                    objectStoragePort?: number | null;
                    objectStorageAccessKey?: string | null;
                    objectStorageSecretKey?: string | null;
                    objectStorageUseSSL?: boolean;
                    objectStorageUseProxy?: boolean;
                    objectStorageSetPublicRead?: boolean;
                    objectStorageS3ForcePathStyle?: boolean;
                    enableIpLogging?: boolean;
                    enableActiveEmailValidation?: boolean;
                    enableVerifymailApi?: boolean;
                    verifymailAuthKey?: string | null;
                    enableTruemailApi?: boolean;
                    truemailInstance?: string | null;
                    truemailAuthKey?: string | null;
                    enableChartsForRemoteUser?: boolean;
                    enableChartsForFederatedInstances?: boolean;
                    enableStatsForFederatedInstances?: boolean;
                    enableServerMachineStats?: boolean;
                    enableIdenticonGeneration?: boolean;
                    serverRules?: string[];
                    bannedEmailDomains?: string[];
                    preservedUsernames?: string[];
                    manifestJsonOverride?: string;
                    enableFanoutTimeline?: boolean;
                    enableFanoutTimelineDbFallback?: boolean;
                    perLocalUserUserTimelineCacheMax?: number;
                    perRemoteUserUserTimelineCacheMax?: number;
                    perUserHomeTimelineCacheMax?: number;
                    perUserListTimelineCacheMax?: number;
                    enableReactionsBuffering?: boolean;
                    notesPerOneAd?: number;
                    silencedHosts?: string[] | null;
                    mediaSilencedHosts?: string[] | null;
                    /** @description [Deprecated] Use "urlPreviewSummaryProxyUrl" instead. */
                    summalyProxy?: string | null;
                    urlPreviewEnabled?: boolean;
                    urlPreviewAllowRedirect?: boolean;
                    urlPreviewTimeout?: number;
                    urlPreviewMaximumContentLength?: number;
                    urlPreviewRequireContentLength?: boolean;
                    urlPreviewUserAgent?: string | null;
                    urlPreviewSummaryProxyUrl?: string | null;
                    /** @enum {string} */
                    federation?: 'all' | 'none' | 'specified';
                    federationHosts?: string[];
                    yamiNoteFederationEnabled?: boolean;
                    yamiNoteFederationTrustedInstances?: string[];
                    deliverSuspendedSoftware?: {
                        software: string;
                        versionRange: string;
                    }[];
                    singleUserMode?: boolean;
                    /** @enum {string} */
                    ugcVisibilityForVisitor?: 'all' | 'local' | 'none';
                    proxyRemoteFiles?: boolean;
                    signToActivityPubGet?: boolean;
                    allowExternalApRedirect?: boolean;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___update-proxy-account': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    description?: string | null;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['UserDetailed'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'admin___update-user-note': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    userId: string;
                    text: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    announcements: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default 10 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                    /** @default true */
                    isActive?: boolean;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Announcement'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    announcements___show: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    announcementId: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Announcement'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    antennas___create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    name: string;
                    /** @enum {string} */
                    src: 'home' | 'all' | 'users' | 'list' | 'users_blacklist';
                    /** Format: misskey:id */
                    userListId?: string | null;
                    keywords: string[][];
                    excludeKeywords: string[][];
                    users: string[];
                    caseSensitive: boolean;
                    localOnly?: boolean;
                    excludeBots?: boolean;
                    withReplies: boolean;
                    withFile: boolean;
                    excludeNotesInSensitiveChannel?: boolean;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Antenna'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    antennas___delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    antennaId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    antennas___list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Antenna'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    antennas___notes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    antennaId: string;
                    /** @default 10 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                    sinceDate?: number;
                    untilDate?: number;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Note'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    antennas___show: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    antennaId: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Antenna'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    antennas___update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    antennaId: string;
                    name?: string;
                    /** @enum {string} */
                    src?: 'home' | 'all' | 'users' | 'list' | 'users_blacklist';
                    /** Format: misskey:id */
                    userListId?: string | null;
                    keywords?: string[][];
                    excludeKeywords?: string[][];
                    users?: string[];
                    caseSensitive?: boolean;
                    localOnly?: boolean;
                    excludeBots?: boolean;
                    withReplies?: boolean;
                    withFile?: boolean;
                    excludeNotesInSensitiveChannel?: boolean;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Antenna'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    ap___get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    uri: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': Record<string, never>;
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    ap___show: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    uri: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {string} */
                        type: 'User';
                        object: components['schemas']['UserDetailedNotMe'];
                    } | {
                        /** @enum {string} */
                        type: 'Note';
                        object: components['schemas']['Note'];
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    app___create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    name: string;
                    description: string;
                    permission: string[];
                    callbackUrl?: string | null;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['App'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    app___show: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    appId: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['App'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    auth___accept: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    token: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    auth___session___generate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    appSecret: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        token: string;
                        /** Format: url */
                        url: string;
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    auth___session___show: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    token: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** Format: id */
                        id: string;
                        app: components['schemas']['App'];
                        token: string;
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    auth___session___userkey: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    appSecret: string;
                    token: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        accessToken: string;
                        user: components['schemas']['UserDetailedNotMe'];
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    blocking___create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    userId: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['UserDetailedNotMe'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    blocking___delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    userId: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['UserDetailedNotMe'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    blocking___list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default 30 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Blocking'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'bubble-game___ranking': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    gameMode: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** Format: misskey:id */
                        id: string;
                        score: number;
                        user?: components['schemas']['UserLite'];
                    }[];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'bubble-game___register': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    score: number;
                    seed: string;
                    logs: number[][];
                    gameMode: string;
                    gameVersion: number;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    channels___create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    name: string;
                    description?: string | null;
                    /** Format: misskey:id */
                    bannerId?: string | null;
                    color?: string;
                    isSensitive?: boolean | null;
                    allowRenoteToExternal?: boolean | null;
                    /**
                     * @default public
                     * @enum {string|null}
                     */
                    followersVisibility?: 'public' | 'followers' | 'private' | null;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Channel'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    channels___favorite: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    channelId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    channels___featured: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Channel'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    channels___follow: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    channelId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    channels___followed: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                    /** @default 5 */
                    limit?: number;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Channel'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    channels___followers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    channelId: string;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                    /** @default 10 */
                    limit?: number;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Following'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'channels___my-favorites': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Channel'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    channels___owned: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                    /** @default 5 */
                    limit?: number;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Channel'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    channels___search: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    query: string;
                    /**
                     * @default nameAndDescription
                     * @enum {string}
                     */
                    type?: 'nameAndDescription' | 'nameOnly';
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                    /** @default 5 */
                    limit?: number;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Channel'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    channels___show: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    channelId: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Channel'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    channels___timeline: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    channelId: string;
                    /** @default 10 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                    sinceDate?: number;
                    untilDate?: number;
                    /** @default false */
                    allowPartial?: boolean;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Note'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    channels___unfavorite: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    channelId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    channels___unfollow: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    channelId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    channels___update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    channelId: string;
                    name?: string;
                    description?: string | null;
                    /** Format: misskey:id */
                    bannerId?: string | null;
                    isArchived?: boolean | null;
                    pinnedNoteIds?: string[];
                    color?: string;
                    isSensitive?: boolean | null;
                    allowRenoteToExternal?: boolean | null;
                    /**
                     * @default public
                     * @enum {string|null}
                     */
                    followersVisibility?: 'public' | 'followers' | 'private' | null;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Channel'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'charts___active-users': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @enum {string} */
                    span: 'day' | 'hour';
                    /** @default 30 */
                    limit?: number;
                    /** @default null */
                    offset?: number | null;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        readWrite: number[];
                        read: number[];
                        write: number[];
                        registeredWithinWeek: number[];
                        registeredWithinMonth: number[];
                        registeredWithinYear: number[];
                        registeredOutsideWeek: number[];
                        registeredOutsideMonth: number[];
                        registeredOutsideYear: number[];
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'charts___ap-request': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @enum {string} */
                    span: 'day' | 'hour';
                    /** @default 30 */
                    limit?: number;
                    /** @default null */
                    offset?: number | null;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        deliverFailed: number[];
                        deliverSucceeded: number[];
                        inboxReceived: number[];
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    charts___drive: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @enum {string} */
                    span: 'day' | 'hour';
                    /** @default 30 */
                    limit?: number;
                    /** @default null */
                    offset?: number | null;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        local: {
                            incCount: number[];
                            incSize: number[];
                            decCount: number[];
                            decSize: number[];
                        };
                        remote: {
                            incCount: number[];
                            incSize: number[];
                            decCount: number[];
                            decSize: number[];
                        };
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    charts___federation: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @enum {string} */
                    span: 'day' | 'hour';
                    /** @default 30 */
                    limit?: number;
                    /** @default null */
                    offset?: number | null;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        deliveredInstances: number[];
                        inboxInstances: number[];
                        stalled: number[];
                        sub: number[];
                        pub: number[];
                        pubsub: number[];
                        subActive: number[];
                        pubActive: number[];
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    charts___instance: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @enum {string} */
                    span: 'day' | 'hour';
                    /** @default 30 */
                    limit?: number;
                    /** @default null */
                    offset?: number | null;
                    host: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        requests: {
                            failed: number[];
                            succeeded: number[];
                            received: number[];
                        };
                        notes: {
                            total: number[];
                            inc: number[];
                            dec: number[];
                            diffs: {
                                normal: number[];
                                reply: number[];
                                renote: number[];
                                withFile: number[];
                            };
                        };
                        users: {
                            total: number[];
                            inc: number[];
                            dec: number[];
                        };
                        following: {
                            total: number[];
                            inc: number[];
                            dec: number[];
                        };
                        followers: {
                            total: number[];
                            inc: number[];
                            dec: number[];
                        };
                        drive: {
                            totalFiles: number[];
                            incFiles: number[];
                            decFiles: number[];
                            incUsage: number[];
                            decUsage: number[];
                        };
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    charts___notes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @enum {string} */
                    span: 'day' | 'hour';
                    /** @default 30 */
                    limit?: number;
                    /** @default null */
                    offset?: number | null;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        local: {
                            total: number[];
                            inc: number[];
                            dec: number[];
                            diffs: {
                                normal: number[];
                                reply: number[];
                                renote: number[];
                                withFile: number[];
                            };
                        };
                        remote: {
                            total: number[];
                            inc: number[];
                            dec: number[];
                            diffs: {
                                normal: number[];
                                reply: number[];
                                renote: number[];
                                withFile: number[];
                            };
                        };
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    charts___user___drive: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @enum {string} */
                    span: 'day' | 'hour';
                    /** @default 30 */
                    limit?: number;
                    /** @default null */
                    offset?: number | null;
                    /** Format: misskey:id */
                    userId: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        totalCount: number[];
                        totalSize: number[];
                        incCount: number[];
                        incSize: number[];
                        decCount: number[];
                        decSize: number[];
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    charts___user___following: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @enum {string} */
                    span: 'day' | 'hour';
                    /** @default 30 */
                    limit?: number;
                    /** @default null */
                    offset?: number | null;
                    /** Format: misskey:id */
                    userId: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        local: {
                            followings: {
                                total: number[];
                                inc: number[];
                                dec: number[];
                            };
                            followers: {
                                total: number[];
                                inc: number[];
                                dec: number[];
                            };
                        };
                        remote: {
                            followings: {
                                total: number[];
                                inc: number[];
                                dec: number[];
                            };
                            followers: {
                                total: number[];
                                inc: number[];
                                dec: number[];
                            };
                        };
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    charts___user___notes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @enum {string} */
                    span: 'day' | 'hour';
                    /** @default 30 */
                    limit?: number;
                    /** @default null */
                    offset?: number | null;
                    /** Format: misskey:id */
                    userId: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        total: number[];
                        inc: number[];
                        dec: number[];
                        diffs: {
                            normal: number[];
                            reply: number[];
                            renote: number[];
                            withFile: number[];
                        };
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    charts___user___pv: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @enum {string} */
                    span: 'day' | 'hour';
                    /** @default 30 */
                    limit?: number;
                    /** @default null */
                    offset?: number | null;
                    /** Format: misskey:id */
                    userId: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        upv: {
                            user: number[];
                            visitor: number[];
                        };
                        pv: {
                            user: number[];
                            visitor: number[];
                        };
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    charts___user___reactions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @enum {string} */
                    span: 'day' | 'hour';
                    /** @default 30 */
                    limit?: number;
                    /** @default null */
                    offset?: number | null;
                    /** Format: misskey:id */
                    userId: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        local: {
                            count: number[];
                        };
                        remote: {
                            count: number[];
                        };
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    charts___users: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @enum {string} */
                    span: 'day' | 'hour';
                    /** @default 30 */
                    limit?: number;
                    /** @default null */
                    offset?: number | null;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        local: {
                            total: number[];
                            inc: number[];
                            dec: number[];
                        };
                        remote: {
                            total: number[];
                            inc: number[];
                            dec: number[];
                        };
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    chat___history: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default 10 */
                    limit?: number;
                    /** @default false */
                    room?: boolean;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChatMessage'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'chat___messages___create-to-room': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    text?: string | null;
                    /** Format: misskey:id */
                    fileId?: string;
                    /** Format: misskey:id */
                    toRoomId: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChatMessageLiteForRoom'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'chat___messages___create-to-user': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    text?: string | null;
                    /** Format: misskey:id */
                    fileId?: string;
                    /** Format: misskey:id */
                    toUserId: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChatMessageLiteFor1on1'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    chat___messages___delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    messageId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    chat___messages___react: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    messageId: string;
                    reaction: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'chat___messages___room-timeline': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default 10 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                    /** Format: misskey:id */
                    roomId: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChatMessageLiteForRoom'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    chat___messages___search: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    query: string;
                    /** @default 10 */
                    limit?: number;
                    /** Format: misskey:id */
                    userId?: string | null;
                    /** Format: misskey:id */
                    roomId?: string | null;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChatMessage'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    chat___messages___show: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    messageId: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChatMessage'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    chat___messages___unreact: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    messageId: string;
                    reaction: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'chat___messages___user-timeline': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default 10 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                    /** Format: misskey:id */
                    userId: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChatMessageLiteFor1on1'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'chat___read-all': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    chat___rooms___create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    name: string;
                    description?: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChatRoom'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    chat___rooms___delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    roomId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    chat___rooms___invitations___create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    roomId: string;
                    /** Format: misskey:id */
                    userId: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChatRoomInvitation'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    chat___rooms___invitations___ignore: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    roomId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    chat___rooms___invitations___inbox: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default 30 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChatRoomInvitation'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    chat___rooms___invitations___outbox: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    roomId: string;
                    /** @default 30 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChatRoomInvitation'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    chat___rooms___join: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    roomId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    chat___rooms___joining: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default 30 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChatRoomMembership'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    chat___rooms___leave: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    roomId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    chat___rooms___members: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    roomId: string;
                    /** @default 30 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChatRoomMembership'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    chat___rooms___mute: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    roomId: string;
                    mute: boolean;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    chat___rooms___owned: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default 30 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChatRoom'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    chat___rooms___show: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    roomId: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChatRoom'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    chat___rooms___update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    roomId: string;
                    name?: string;
                    description?: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChatRoom'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'clips___add-note': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    clipId: string;
                    /** Format: misskey:id */
                    noteId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    clips___create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    name: string;
                    /** @default false */
                    isPublic?: boolean;
                    description?: string | null;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Clip'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    clips___delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    clipId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    clips___favorite: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    clipId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    clips___list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Clip'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'clips___my-favorites': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Clip'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    clips___notes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    clipId: string;
                    /** @default 10 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Note'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'clips___remove-note': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    clipId: string;
                    /** Format: misskey:id */
                    noteId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    clips___show: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    clipId: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Clip'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    clips___unfavorite: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    clipId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    clips___update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    clipId: string;
                    name?: string;
                    isPublic?: boolean;
                    description?: string | null;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Clip'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    drive: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        capacity: number;
                        usage: number;
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    drive___files: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default 10 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                    /**
                     * Format: misskey:id
                     * @default null
                     */
                    folderId?: string | null;
                    type?: string | null;
                    /** @enum {string|null} */
                    sort?: '+createdAt' | '-createdAt' | '+name' | '-name' | '+size' | '-size' | null;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['DriveFile'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'drive___files___attached-notes': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                    /** @default 10 */
                    limit?: number;
                    /** Format: misskey:id */
                    fileId: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Note'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'drive___files___check-existence': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    md5: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': boolean;
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    drive___files___create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'multipart/form-data': {
                    /**
                     * Format: misskey:id
                     * @default null
                     */
                    folderId?: string | null;
                    /** @default null */
                    name?: string | null;
                    /** @default null */
                    comment?: string | null;
                    /** @default false */
                    isSensitive?: boolean;
                    /** @default false */
                    force?: boolean;
                    /**
                     * Format: binary
                     * @description The file contents.
                     */
                    file: Blob;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['DriveFile'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    drive___files___delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    fileId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    drive___files___find: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    name: string;
                    /**
                     * Format: misskey:id
                     * @default null
                     */
                    folderId?: string | null;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['DriveFile'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'drive___files___find-by-hash': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    md5: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['DriveFile'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'drive___files___move-bulk': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    fileIds: string[];
                    /** Format: misskey:id */
                    folderId?: string | null;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    drive___files___show: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    fileId: string;
                } | {
                    url: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['DriveFile'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    drive___files___update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    fileId: string;
                    /** Format: misskey:id */
                    folderId?: string | null;
                    name?: string;
                    isSensitive?: boolean;
                    comment?: string | null;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['DriveFile'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'drive___files___upload-from-url': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    url: string;
                    /**
                     * Format: misskey:id
                     * @default null
                     */
                    folderId?: string | null;
                    /** @default false */
                    isSensitive?: boolean;
                    /** @default null */
                    comment?: string | null;
                    /** @default null */
                    marker?: string | null;
                    /** @default false */
                    force?: boolean;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    drive___folders: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default 10 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                    /**
                     * Format: misskey:id
                     * @default null
                     */
                    folderId?: string | null;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['DriveFolder'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    drive___folders___create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default Untitled */
                    name?: string;
                    /** Format: misskey:id */
                    parentId?: string | null;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['DriveFolder'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    drive___folders___delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    folderId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    drive___folders___find: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    name: string;
                    /**
                     * Format: misskey:id
                     * @default null
                     */
                    parentId?: string | null;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['DriveFolder'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    drive___folders___show: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    folderId: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['DriveFolder'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    drive___folders___update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    folderId: string;
                    name?: string;
                    /** Format: misskey:id */
                    parentId?: string | null;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['DriveFolder'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    drive___stream: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default 10 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                    type?: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['DriveFile'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'email-address___available': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    emailAddress: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        available: boolean;
                        reason: string | null;
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    emoji: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    name: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['EmojiDetailed'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    emojis: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        emojis: components['schemas']['EmojiSimple'][];
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    endpoint: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    endpoint: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        params: {
                            name: string;
                            type: string;
                        }[];
                    } | null;
                };
            };
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    endpoints: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': string[];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'export-custom-emojis': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    federation___followers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    host: string;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                    /** @default 10 */
                    limit?: number;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Following'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    federation___following: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    host: string;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                    /** @default 10 */
                    limit?: number;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Following'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    federation___instances: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @description Omit or use `null` to not filter by host. */
                    host?: string | null;
                    blocked?: boolean | null;
                    notResponding?: boolean | null;
                    suspended?: boolean | null;
                    silenced?: boolean | null;
                    federating?: boolean | null;
                    subscribing?: boolean | null;
                    publishing?: boolean | null;
                    /** @default 30 */
                    limit?: number;
                    /** @default 0 */
                    offset?: number;
                    /** @enum {string|null} */
                    sort?: '+pubSub' | '-pubSub' | '+notes' | '-notes' | '+users' | '-users' | '+following' | '-following' | '+followers' | '-followers' | '+firstRetrievedAt' | '-firstRetrievedAt' | '+latestRequestReceivedAt' | '-latestRequestReceivedAt' | null;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['FederationInstance'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'federation___show-instance': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    host: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['FederationInstance'] | null;
                };
            };
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    federation___stats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default 10 */
                    limit?: number;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        topSubInstances: components['schemas']['FederationInstance'][];
                        otherFollowersCount: number;
                        topPubInstances: components['schemas']['FederationInstance'][];
                        otherFollowingCount: number;
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'federation___update-remote-user': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    userId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    federation___users: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    host: string;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                    /** @default 10 */
                    limit?: number;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['UserDetailedNotMe'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'fetch-external-resources': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    url: string;
                    hash: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        type: string;
                        data: string;
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'fetch-rss': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    url: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        image?: {
                            link?: string;
                            url: string;
                            title?: string;
                        };
                        paginationLinks?: {
                            self?: string;
                            first?: string;
                            next?: string;
                            last?: string;
                            prev?: string;
                        };
                        link?: string;
                        title?: string;
                        items: {
                            link?: string;
                            guid?: string;
                            title?: string;
                            pubDate?: string;
                            creator?: string;
                            summary?: string;
                            content?: string;
                            isoDate?: string;
                            categories?: string[];
                            contentSnippet?: string;
                            enclosure?: {
                                url: string;
                                length?: number;
                                type?: string;
                            };
                        }[];
                        feedUrl?: string;
                        description?: string;
                        itunes?: {
                            image?: string;
                            owner?: {
                                name?: string;
                                email?: string;
                            };
                            author?: string;
                            summary?: string;
                            explicit?: string;
                            categories?: string[];
                            keywords?: string[];
                        } & {
                            [key: string]: unknown;
                        };
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    flash___create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    title: string;
                    summary: string;
                    script: string;
                    permissions: string[];
                    /**
                     * @default public
                     * @enum {string}
                     */
                    visibility?: 'public' | 'private';
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Flash'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    flash___delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    flashId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    flash___featured: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default 0 */
                    offset?: number;
                    /** @default 10 */
                    limit?: number;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Flash'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    flash___like: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    flashId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    flash___my: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default 10 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Flash'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'flash___my-likes': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default 10 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** Format: id */
                        id: string;
                        flash: components['schemas']['Flash'];
                    }[];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    flash___show: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    flashId: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Flash'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    flash___unlike: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    flashId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    flash___update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    flashId: string;
                    title?: string;
                    summary?: string;
                    script?: string;
                    permissions?: string[];
                    /** @enum {string} */
                    visibility?: 'public' | 'private';
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    following___create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    userId: string;
                    withReplies?: boolean;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['UserLite'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    following___delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    userId: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['UserLite'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    following___invalidate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    userId: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['UserLite'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    following___requests___accept: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    userId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    following___requests___cancel: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    userId: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['UserLite'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    following___requests___list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                    /** @default 10 */
                    limit?: number;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** Format: id */
                        id: string;
                        follower: components['schemas']['UserLite'];
                        followee: components['schemas']['UserLite'];
                    }[];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    following___requests___reject: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    userId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    following___requests___sent: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                    /** @default 10 */
                    limit?: number;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** Format: id */
                        id: string;
                        follower: components['schemas']['UserLite'];
                        followee: components['schemas']['UserLite'];
                    }[];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    following___update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    userId: string;
                    /** @enum {string} */
                    notify?: 'normal' | 'none';
                    withReplies?: boolean;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['UserLite'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'following___update-all': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @enum {string} */
                    notify?: 'normal' | 'none';
                    withReplies?: boolean;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    gallery___featured: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default 10 */
                    limit?: number;
                    /** Format: misskey:id */
                    untilId?: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['GalleryPost'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    gallery___popular: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['GalleryPost'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    gallery___posts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default 10 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['GalleryPost'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    gallery___posts___create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    title: string;
                    description?: string | null;
                    fileIds: string[];
                    /** @default false */
                    isSensitive?: boolean;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['GalleryPost'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    gallery___posts___delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    postId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    gallery___posts___like: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    postId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    gallery___posts___show: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    postId: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['GalleryPost'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    gallery___posts___unlike: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    postId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    gallery___posts___update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    postId: string;
                    title?: string;
                    description?: string | null;
                    fileIds?: string[];
                    /** @default false */
                    isSensitive?: boolean;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['GalleryPost'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'get-avatar-decorations': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /**
                         * Format: id
                         * @example xxxxxxxxxx
                         */
                        id: string;
                        name: string;
                        description: string;
                        url: string;
                        roleIdsThatCanBeUsedThisDecoration: string[];
                    }[];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'get-online-users-count': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        count: number;
                        details: {
                            id: string;
                            username: string;
                            name?: string | null;
                            avatarUrl?: string | null;
                            avatarBlurhash?: string | null;
                            avatarDecorations: {
                                /** Format: id */
                                id: string;
                                angle?: number;
                                flipH?: boolean;
                                /** Format: url */
                                url: string;
                                offsetX?: number;
                                offsetY?: number;
                            }[];
                            host?: string | null;
                            lastActiveDate: string;
                            /** @enum {string} */
                            onlineStatus: 'online' | 'active' | 'offline' | 'unknown';
                            hideOnlineStatus: boolean;
                        }[];
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    hashtags___list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default 10 */
                    limit?: number;
                    /** @default false */
                    attachedToUserOnly?: boolean;
                    /** @default false */
                    attachedToLocalUserOnly?: boolean;
                    /** @default false */
                    attachedToRemoteUserOnly?: boolean;
                    /** @enum {string} */
                    sort: '+mentionedUsers' | '-mentionedUsers' | '+mentionedLocalUsers' | '-mentionedLocalUsers' | '+mentionedRemoteUsers' | '-mentionedRemoteUsers' | '+attachedUsers' | '-attachedUsers' | '+attachedLocalUsers' | '-attachedLocalUsers' | '+attachedRemoteUsers' | '-attachedRemoteUsers';
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Hashtag'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    hashtags___search: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default 10 */
                    limit?: number;
                    query: string;
                    /** @default 0 */
                    offset?: number;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': string[];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    hashtags___show: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    tag: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Hashtag'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    hashtags___trend: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        tag: string;
                        chart: number[];
                        usersCount: number;
                    }[];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    hashtags___users: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    tag: string;
                    /** @default 10 */
                    limit?: number;
                    /** @enum {string} */
                    sort: '+follower' | '-follower' | '+createdAt' | '-createdAt' | '+updatedAt' | '-updatedAt';
                    /**
                     * @default all
                     * @enum {string}
                     */
                    state?: 'all' | 'alive';
                    /**
                     * @default local
                     * @enum {string}
                     */
                    origin?: 'combined' | 'local' | 'remote';
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['UserDetailed'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    i: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['MeDetailed'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    i___2fa___done: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    token: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        backupCodes: string[];
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'i___2fa___key-done': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    password: string;
                    token?: string | null;
                    name: string;
                    credential: Record<string, never>;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        id: string;
                        name: string;
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'i___2fa___password-less': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    value: boolean;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    i___2fa___register: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    password: string;
                    token?: string | null;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        qr: string;
                        url: string;
                        secret: string;
                        label: string;
                        issuer: string;
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'i___2fa___register-key': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    password: string;
                    token?: string | null;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        rp: {
                            id?: string;
                        };
                        user: {
                            id: string;
                            name: string;
                            displayName: string;
                        };
                        challenge: string;
                        pubKeyCredParams: {
                            type: string;
                            alg: number;
                        }[];
                        timeout: number | null;
                        excludeCredentials: {
                            id: string;
                            type: string;
                            transports: ('ble' | 'cable' | 'hybrid' | 'internal' | 'nfc' | 'smart-card' | 'usb')[];
                        }[] | null;
                        authenticatorSelection: {
                            /** @enum {string} */
                            authenticatorAttachment: 'cross-platform' | 'platform';
                            requireResidentKey: boolean;
                            /** @enum {string} */
                            userVerification: 'discouraged' | 'preferred' | 'required';
                        } | null;
                        /** @enum {string|null} */
                        attestation: 'direct' | 'enterprise' | 'indirect' | 'none' | null;
                        extensions: {
                            appid: string | null;
                            credProps: boolean | null;
                            hmacCreateSecret: boolean | null;
                        } | null;
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'i___2fa___remove-key': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    password: string;
                    token?: string | null;
                    credentialId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    i___2fa___unregister: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    password: string;
                    token?: string | null;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'i___2fa___update-key': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    name: string;
                    credentialId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    i___apps: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @enum {string} */
                    sort?: '+createdAt' | '-createdAt' | '+lastUsedAt' | '-lastUsedAt';
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** Format: misskey:id */
                        id: string;
                        name?: string;
                        /** Format: date-time */
                        createdAt: string;
                        /** Format: date-time */
                        lastUsedAt?: string;
                        permission: string[];
                    }[];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'i___authorized-apps': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default 10 */
                    limit?: number;
                    /** @default 0 */
                    offset?: number;
                    /**
                     * @default desc
                     * @enum {string}
                     */
                    sort?: 'desc' | 'asc';
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** Format: misskey:id */
                        id: string;
                        name: string;
                        callbackUrl: string | null;
                        permission: string[];
                        isAuthorized?: boolean;
                    }[];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'i___change-password': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    currentPassword: string;
                    newPassword: string;
                    token?: string | null;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'i___claim-achievement': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @enum {string} */
                    name: 'notes1' | 'notes10' | 'notes100' | 'notes500' | 'notes1000' | 'notes5000' | 'notes10000' | 'notes20000' | 'notes30000' | 'notes40000' | 'notes50000' | 'notes60000' | 'notes70000' | 'notes80000' | 'notes90000' | 'notes100000' | 'login3' | 'login7' | 'login15' | 'login30' | 'login60' | 'login100' | 'login200' | 'login300' | 'login400' | 'login500' | 'login600' | 'login700' | 'login800' | 'login900' | 'login1000' | 'passedSinceAccountCreated1' | 'passedSinceAccountCreated2' | 'passedSinceAccountCreated3' | 'loggedInOnBirthday' | 'loggedInOnNewYearsDay' | 'noteClipped1' | 'noteFavorited1' | 'myNoteFavorited1' | 'profileFilled' | 'markedAsCat' | 'markedAsYamiModeUser' | 'following1' | 'following10' | 'following50' | 'following100' | 'following300' | 'followers1' | 'followers10' | 'followers50' | 'followers100' | 'followers300' | 'followers500' | 'followers1000' | 'collectAchievements30' | 'viewAchievements3min' | 'iLoveMisskey' | 'foundTreasure' | 'client30min' | 'client60min' | 'noteDeletedWithin1min' | 'postedAtLateNight' | 'postedAt0min0sec' | 'selfQuote' | 'htl20npm' | 'viewInstanceChart' | 'outputHelloWorldOnScratchpad' | 'open3windows' | 'driveFolderCircularReference' | 'reactWithoutRead' | 'clickedClickHere' | 'justPlainLucky' | 'setNameToSyuilo' | 'cookieClicked' | 'brainDiver' | 'smashTestNotificationButton' | 'tutorialCompleted' | 'bubbleGameExplodingHead' | 'bubbleGameDoubleExplodingHead';
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'i___delete-account': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    password: string;
                    token?: string | null;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'i___export-antennas': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'i___export-blocking': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'i___export-clips': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'i___export-favorites': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'i___export-following': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default false */
                    excludeMuting?: boolean;
                    /** @default false */
                    excludeInactive?: boolean;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'i___export-mute': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'i___export-notes': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'i___export-user-lists': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    i___favorites: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default 10 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['NoteFavorite'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    i___gallery___likes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default 10 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** Format: id */
                        id: string;
                        post: components['schemas']['GalleryPost'];
                    }[];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    i___gallery___posts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default 10 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['GalleryPost'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'i___import-antennas': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    fileId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'i___import-blocking': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    fileId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'i___import-following': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    fileId: string;
                    withReplies?: boolean;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'i___import-muting': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    fileId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'i___import-user-lists': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    fileId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    i___move: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    moveToAccount: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': Record<string, never>;
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    i___notifications: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default 10 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                    /** @default true */
                    markAsRead?: boolean;
                    includeTypes?: ('note' | 'follow' | 'unfollow' | 'mention' | 'reply' | 'renote' | 'quote' | 'reaction' | 'pollEnded' | 'blocked' | 'unblocked' | 'receiveFollowRequest' | 'followRequestAccepted' | 'roleAssigned' | 'chatRoomInvitationReceived' | 'achievementEarned' | 'exportCompleted' | 'login' | 'createToken' | 'scheduledNoteFailed' | 'scheduledNotePosted' | 'app' | 'test' | 'pollVote' | 'groupInvited')[];
                    excludeTypes?: ('note' | 'follow' | 'unfollow' | 'mention' | 'reply' | 'renote' | 'quote' | 'reaction' | 'pollEnded' | 'blocked' | 'unblocked' | 'receiveFollowRequest' | 'followRequestAccepted' | 'roleAssigned' | 'chatRoomInvitationReceived' | 'achievementEarned' | 'exportCompleted' | 'login' | 'createToken' | 'scheduledNoteFailed' | 'scheduledNotePosted' | 'app' | 'test' | 'pollVote' | 'groupInvited')[];
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Notification'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'i___notifications-grouped': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default 10 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                    /** @default true */
                    markAsRead?: boolean;
                    includeTypes?: ('note' | 'follow' | 'unfollow' | 'mention' | 'reply' | 'renote' | 'quote' | 'reaction' | 'pollEnded' | 'blocked' | 'unblocked' | 'receiveFollowRequest' | 'followRequestAccepted' | 'roleAssigned' | 'chatRoomInvitationReceived' | 'achievementEarned' | 'exportCompleted' | 'login' | 'createToken' | 'scheduledNoteFailed' | 'scheduledNotePosted' | 'app' | 'test' | 'pollVote' | 'groupInvited')[];
                    excludeTypes?: ('note' | 'follow' | 'unfollow' | 'mention' | 'reply' | 'renote' | 'quote' | 'reaction' | 'pollEnded' | 'blocked' | 'unblocked' | 'receiveFollowRequest' | 'followRequestAccepted' | 'roleAssigned' | 'chatRoomInvitationReceived' | 'achievementEarned' | 'exportCompleted' | 'login' | 'createToken' | 'scheduledNoteFailed' | 'scheduledNotePosted' | 'app' | 'test' | 'pollVote' | 'groupInvited')[];
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Notification'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'i___page-likes': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default 10 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** Format: id */
                        id: string;
                        page: components['schemas']['Page'];
                    }[];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    i___pages: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default 10 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Page'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    i___pin: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    noteId: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['MeDetailed'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'i___read-announcement': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    announcementId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'i___regenerate-token': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    password: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    i___registry___get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    key: string;
                    /** @default [] */
                    scope: string[];
                    domain?: string | null;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': Record<string, never>;
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'i___registry___get-all': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default [] */
                    scope: string[];
                    domain?: string | null;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': Record<string, never>;
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'i___registry___get-detail': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    key: string;
                    /** @default [] */
                    scope: string[];
                    domain?: string | null;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        updatedAt: string;
                        value: unknown;
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    i___registry___keys: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default [] */
                    scope: string[];
                    domain?: string | null;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': string[];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'i___registry___keys-with-type': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default [] */
                    scope: string[];
                    domain?: string | null;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        [key: string]: string;
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    i___registry___remove: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    key: string;
                    /** @default [] */
                    scope: string[];
                    domain?: string | null;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'i___registry___scopes-with-domain': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        scopes: string[][];
                        domain: string | null;
                    }[];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    i___registry___set: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    key: string;
                    value: unknown;
                    /** @default [] */
                    scope: string[];
                    domain?: string | null;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'i___revoke-token': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    tokenId: string;
                } | {
                    token: string | null;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'i___signin-history': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default 10 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Signin'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    i___unpin: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    noteId: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['MeDetailed'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    i___update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    name?: string | null;
                    description?: string | null;
                    followedMessage?: string | null;
                    location?: string | null;
                    birthday?: string | null;
                    listenbrainz?: string | null;
                    /** @enum {string|null} */
                    lang?: null | 'ach' | 'ady' | 'af' | 'af-NA' | 'af-ZA' | 'ak' | 'ar' | 'ar-AR' | 'ar-MA' | 'ar-SA' | 'ay-BO' | 'az' | 'az-AZ' | 'be-BY' | 'bg' | 'bg-BG' | 'bn' | 'bn-IN' | 'bn-BD' | 'br' | 'bs-BA' | 'ca' | 'ca-ES' | 'cak' | 'ck-US' | 'cs' | 'cs-CZ' | 'cy' | 'cy-GB' | 'da' | 'da-DK' | 'de' | 'de-AT' | 'de-DE' | 'de-CH' | 'dsb' | 'el' | 'el-GR' | 'en' | 'en-GB' | 'en-AU' | 'en-CA' | 'en-IE' | 'en-IN' | 'en-PI' | 'en-SG' | 'en-UD' | 'en-US' | 'en-ZA' | 'en@pirate' | 'eo' | 'eo-EO' | 'es' | 'es-AR' | 'es-419' | 'es-CL' | 'es-CO' | 'es-EC' | 'es-ES' | 'es-LA' | 'es-NI' | 'es-MX' | 'es-US' | 'es-VE' | 'et' | 'et-EE' | 'eu' | 'eu-ES' | 'fa' | 'fa-IR' | 'fb-LT' | 'ff' | 'fi' | 'fi-FI' | 'fo' | 'fo-FO' | 'fr' | 'fr-CA' | 'fr-FR' | 'fr-BE' | 'fr-CH' | 'fy-NL' | 'ga' | 'ga-IE' | 'gd' | 'gl' | 'gl-ES' | 'gn-PY' | 'gu-IN' | 'gv' | 'gx-GR' | 'he' | 'he-IL' | 'hi' | 'hi-IN' | 'hr' | 'hr-HR' | 'hsb' | 'ht' | 'hu' | 'hu-HU' | 'hy' | 'hy-AM' | 'id' | 'id-ID' | 'is' | 'is-IS' | 'it' | 'it-IT' | 'ja' | 'ja-JP' | 'jv-ID' | 'ka-GE' | 'kk-KZ' | 'km' | 'kl' | 'km-KH' | 'kab' | 'kn' | 'kn-IN' | 'ko' | 'ko-KR' | 'ku-TR' | 'kw' | 'la' | 'la-VA' | 'lb' | 'li-NL' | 'lt' | 'lt-LT' | 'lv' | 'lv-LV' | 'mai' | 'mg-MG' | 'mk' | 'mk-MK' | 'ml' | 'ml-IN' | 'mn-MN' | 'mr' | 'mr-IN' | 'ms' | 'ms-MY' | 'mt' | 'mt-MT' | 'my' | 'no' | 'nb' | 'nb-NO' | 'ne' | 'ne-NP' | 'nl' | 'nl-BE' | 'nl-NL' | 'nn-NO' | 'oc' | 'or-IN' | 'pa' | 'pa-IN' | 'pl' | 'pl-PL' | 'ps-AF' | 'pt' | 'pt-BR' | 'pt-PT' | 'qu-PE' | 'rm-CH' | 'ro' | 'ro-RO' | 'ru' | 'ru-RU' | 'sa-IN' | 'se-NO' | 'sh' | 'si-LK' | 'sk' | 'sk-SK' | 'sl' | 'sl-SI' | 'so-SO' | 'sq' | 'sq-AL' | 'sr' | 'sr-RS' | 'su' | 'sv' | 'sv-SE' | 'sw' | 'sw-KE' | 'ta' | 'ta-IN' | 'te' | 'te-IN' | 'tg' | 'tg-TJ' | 'th' | 'th-TH' | 'fil' | 'tlh' | 'tr' | 'tr-TR' | 'tt-RU' | 'uk' | 'uk-UA' | 'ur' | 'ur-PK' | 'uz' | 'uz-UZ' | 'vi' | 'vi-VN' | 'xh-ZA' | 'yi' | 'yi-DE' | 'zh' | 'zh-Hans' | 'zh-Hant' | 'zh-CN' | 'zh-HK' | 'zh-SG' | 'zh-TW' | 'zu-ZA';
                    /** Format: misskey:id */
                    avatarId?: string | null;
                    avatarDecorations?: {
                        /** Format: misskey:id */
                        id: string;
                        angle?: number | null;
                        flipH?: boolean | null;
                        offsetX?: number | null;
                        offsetY?: number | null;
                    }[];
                    /** Format: misskey:id */
                    bannerId?: string | null;
                    fields?: {
                        name: string;
                        value: string;
                    }[];
                    isLocked?: boolean;
                    isExplorable?: boolean;
                    hideOnlineStatus?: boolean;
                    activeStatusVisibility?: {
                        /** @enum {string} */
                        type: 'all' | 'following' | 'followers' | 'mutualFollow' | 'followingOrFollower' | 'never';
                    } | {
                        /** @enum {string} */
                        type: 'list';
                        /** Format: misskey:id */
                        userListId: string;
                    };
                    hideSearchResult?: boolean;
                    publicReactions?: boolean;
                    hideActivity?: boolean;
                    hideProfileFiles?: boolean;
                    carefulBot?: boolean;
                    autoAcceptFollowed?: boolean;
                    autoRejectFollowRequest?: boolean;
                    noCrawle?: boolean;
                    preventAiLearning?: boolean;
                    requireSigninToViewContents?: boolean;
                    makeNotesFollowersOnlyBefore?: number | null;
                    makeNotesHiddenBefore?: number | null;
                    isBot?: boolean;
                    isCat?: boolean;
                    isInYamiMode?: boolean;
                    injectFeaturedNote?: boolean;
                    receiveAnnouncementEmail?: boolean;
                    alwaysMarkNsfw?: boolean;
                    autoSensitive?: boolean;
                    /** @enum {string} */
                    notesVisibility?: 'public' | 'followers' | 'private';
                    /** @enum {string} */
                    followingVisibility?: 'public' | 'followers' | 'private';
                    /** @enum {string} */
                    followersVisibility?: 'public' | 'followers' | 'private';
                    /** @enum {string} */
                    chatScope?: 'everyone' | 'followers' | 'following' | 'mutual' | 'none';
                    /** Format: misskey:id */
                    pinnedPageId?: string | null;
                    mutedWords?: (string[] | string)[];
                    hardMutedWords?: (string[] | string)[];
                    mutedInstances?: string[];
                    notificationRecieveConfig?: {
                        note?: {
                            /** @enum {string} */
                            type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'followingOrFollower' | 'never';
                        } | {
                            /** @enum {string} */
                            type: 'list';
                            /** Format: misskey:id */
                            userListId: string;
                        };
                        follow?: {
                            /** @enum {string} */
                            type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'followingOrFollower' | 'never';
                        } | {
                            /** @enum {string} */
                            type: 'list';
                            /** Format: misskey:id */
                            userListId: string;
                        };
                        mention?: {
                            /** @enum {string} */
                            type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'followingOrFollower' | 'never';
                        } | {
                            /** @enum {string} */
                            type: 'list';
                            /** Format: misskey:id */
                            userListId: string;
                        };
                        reply?: {
                            /** @enum {string} */
                            type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'followingOrFollower' | 'never';
                        } | {
                            /** @enum {string} */
                            type: 'list';
                            /** Format: misskey:id */
                            userListId: string;
                        };
                        renote?: {
                            /** @enum {string} */
                            type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'followingOrFollower' | 'never';
                        } | {
                            /** @enum {string} */
                            type: 'list';
                            /** Format: misskey:id */
                            userListId: string;
                        };
                        quote?: {
                            /** @enum {string} */
                            type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'followingOrFollower' | 'never';
                        } | {
                            /** @enum {string} */
                            type: 'list';
                            /** Format: misskey:id */
                            userListId: string;
                        };
                        reaction?: {
                            /** @enum {string} */
                            type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'followingOrFollower' | 'never';
                        } | {
                            /** @enum {string} */
                            type: 'list';
                            /** Format: misskey:id */
                            userListId: string;
                        };
                        pollEnded?: {
                            /** @enum {string} */
                            type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'followingOrFollower' | 'never';
                        } | {
                            /** @enum {string} */
                            type: 'list';
                            /** Format: misskey:id */
                            userListId: string;
                        };
                        blocked?: {
                            /** @enum {string} */
                            type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'followingOrFollower' | 'never';
                        } | {
                            /** @enum {string} */
                            type: 'list';
                            /** Format: misskey:id */
                            userListId: string;
                        };
                        unblocked?: {
                            /** @enum {string} */
                            type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'followingOrFollower' | 'never';
                        } | {
                            /** @enum {string} */
                            type: 'list';
                            /** Format: misskey:id */
                            userListId: string;
                        };
                        receiveFollowRequest?: {
                            /** @enum {string} */
                            type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'followingOrFollower' | 'never';
                        } | {
                            /** @enum {string} */
                            type: 'list';
                            /** Format: misskey:id */
                            userListId: string;
                        };
                        followRequestAccepted?: {
                            /** @enum {string} */
                            type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'followingOrFollower' | 'never';
                        } | {
                            /** @enum {string} */
                            type: 'list';
                            /** Format: misskey:id */
                            userListId: string;
                        };
                        roleAssigned?: {
                            /** @enum {string} */
                            type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'followingOrFollower' | 'never';
                        } | {
                            /** @enum {string} */
                            type: 'list';
                            /** Format: misskey:id */
                            userListId: string;
                        };
                        chatRoomInvitationReceived?: {
                            /** @enum {string} */
                            type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'followingOrFollower' | 'never';
                        } | {
                            /** @enum {string} */
                            type: 'list';
                            /** Format: misskey:id */
                            userListId: string;
                        };
                        achievementEarned?: {
                            /** @enum {string} */
                            type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'followingOrFollower' | 'never';
                        } | {
                            /** @enum {string} */
                            type: 'list';
                            /** Format: misskey:id */
                            userListId: string;
                        };
                        app?: {
                            /** @enum {string} */
                            type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'followingOrFollower' | 'never';
                        } | {
                            /** @enum {string} */
                            type: 'list';
                            /** Format: misskey:id */
                            userListId: string;
                        };
                        test?: {
                            /** @enum {string} */
                            type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'followingOrFollower' | 'never';
                        } | {
                            /** @enum {string} */
                            type: 'list';
                            /** Format: misskey:id */
                            userListId: string;
                        };
                    };
                    emailNotificationTypes?: string[];
                    alsoKnownAs?: string[];
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['MeDetailed'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'i___update-email': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    password: string;
                    email?: string | null;
                    token?: string | null;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['MeDetailed'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    i___webhooks___create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    name: string;
                    url: string;
                    /** @default  */
                    secret?: string;
                    on: ('mention' | 'unfollow' | 'follow' | 'followed' | 'note' | 'reply' | 'renote' | 'reaction')[];
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** Format: misskey:id */
                        id: string;
                        /** Format: misskey:id */
                        userId: string;
                        name: string;
                        on: ('mention' | 'unfollow' | 'follow' | 'followed' | 'note' | 'reply' | 'renote' | 'reaction')[];
                        url: string;
                        secret: string;
                        active: boolean;
                        /** Format: date-time */
                        latestSentAt: string | null;
                        latestStatus: number | null;
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    i___webhooks___delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    webhookId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    i___webhooks___list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** Format: misskey:id */
                        id: string;
                        /** Format: misskey:id */
                        userId: string;
                        name: string;
                        on: ('mention' | 'unfollow' | 'follow' | 'followed' | 'note' | 'reply' | 'renote' | 'reaction')[];
                        url: string;
                        secret: string;
                        active: boolean;
                        /** Format: date-time */
                        latestSentAt: string | null;
                        latestStatus: number | null;
                    }[];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    i___webhooks___show: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    webhookId: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** Format: misskey:id */
                        id: string;
                        /** Format: misskey:id */
                        userId: string;
                        name: string;
                        on: ('mention' | 'unfollow' | 'follow' | 'followed' | 'note' | 'reply' | 'renote' | 'reaction')[];
                        url: string;
                        secret: string;
                        active: boolean;
                        /** Format: date-time */
                        latestSentAt: string | null;
                        latestStatus: number | null;
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    i___webhooks___test: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    webhookId: string;
                    /** @enum {string} */
                    type: 'mention' | 'unfollow' | 'follow' | 'followed' | 'note' | 'reply' | 'renote' | 'reaction';
                    override?: {
                        url?: string;
                        secret?: string;
                    };
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    i___webhooks___update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    webhookId: string;
                    name?: string;
                    url?: string;
                    secret?: string | null;
                    on?: ('mention' | 'unfollow' | 'follow' | 'followed' | 'note' | 'reply' | 'renote' | 'reaction')[];
                    active?: boolean;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    invite___create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['InviteCode'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    invite___delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    inviteId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    invite___limit: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        remaining: number | null;
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    invite___list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default 30 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['InviteCode'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    meta: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default true */
                    detail?: boolean;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['MetaLite'] | components['schemas']['MetaDetailed'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'miauth___gen-token': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    session: string | null;
                    name?: string | null;
                    description?: string | null;
                    iconUrl?: string | null;
                    permission: string[];
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        token: string;
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    mute___create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    userId: string;
                    /** @description A Unix Epoch timestamp that must lie in the future. `null` means an indefinite mute. */
                    expiresAt?: number | null;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    mute___delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    userId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    mute___list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default 30 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Muting'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    my___apps: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default 10 */
                    limit?: number;
                    /** @default 0 */
                    offset?: number;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['App'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    notes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default false */
                    local?: boolean;
                    reply?: boolean;
                    renote?: boolean;
                    withFiles?: boolean;
                    poll?: boolean;
                    /** @default 10 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Note'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    notes___children: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    noteId: string;
                    /** @default 10 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Note'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    notes___clips: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    noteId: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Clip'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    notes___conversation: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    noteId: string;
                    /** @default 10 */
                    limit?: number;
                    /** @default 0 */
                    offset?: number;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Note'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    notes___create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /**
                     * @default public
                     * @enum {string}
                     */
                    visibility?: 'public' | 'home' | 'followers' | 'specified';
                    visibleUserIds?: string[];
                    cw?: string | null;
                    /** @default false */
                    localOnly?: boolean;
                    /** @default false */
                    isNoteInYamiMode?: boolean;
                    /**
                     * @default null
                     * @enum {string|null}
                     */
                    reactionAcceptance?: null | 'likeOnly' | 'likeOnlyForRemote' | 'nonSensitiveOnly' | 'nonSensitiveOnlyForLocalLikeOnlyForRemote';
                    /** @default false */
                    noExtractMentions?: boolean;
                    /** @default false */
                    noExtractHashtags?: boolean;
                    /** @default false */
                    noExtractEmojis?: boolean;
                    /** Format: misskey:id */
                    replyId?: string | null;
                    /** Format: misskey:id */
                    renoteId?: string | null;
                    /** Format: misskey:id */
                    channelId?: string | null;
                    text?: string | null;
                    fileIds?: string[];
                    mediaIds?: string[];
                    poll?: {
                        choices: string[];
                        multiple?: boolean;
                        expiresAt?: number | null;
                        expiredAfter?: number | null;
                    } | null;
                    scheduledDelete?: {
                        deleteAt?: number | null;
                        deleteAfter?: number | null;
                    } | null;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        createdNote: components['schemas']['Note'];
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    notes___delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    noteId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    notes___favorites___create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    noteId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    notes___favorites___delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    noteId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    notes___featured: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default 10 */
                    limit?: number;
                    /** Format: misskey:id */
                    untilId?: string;
                    /** Format: misskey:id */
                    channelId?: string | null;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Note'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    notes___floater: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default 10 */
                    limit?: number;
                    /** @default 0 */
                    noteLimit?: number;
                    /** @default 10 */
                    maxNoteLimit?: number;
                    /** Format: misskey:id */
                    anchorId?: string;
                    anchorDate?: number;
                    /** @default 0 */
                    offset?: number;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Note'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'notes___global-timeline': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default false */
                    withFiles?: boolean;
                    /** @default true */
                    withRenotes?: boolean;
                    /** @default true */
                    withHashtags?: boolean;
                    /** @default 10 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                    sinceDate?: number;
                    untilDate?: number;
                    /** @default false */
                    remoteOnly?: boolean;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Note'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'notes___hybrid-timeline': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default 10 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                    sinceDate?: number;
                    untilDate?: number;
                    /** @default false */
                    allowPartial?: boolean;
                    /** @default true */
                    includeMyRenotes?: boolean;
                    /** @default true */
                    includeRenotedMyNotes?: boolean;
                    /** @default true */
                    includeLocalRenotes?: boolean;
                    /** @default false */
                    withFiles?: boolean;
                    /** @default true */
                    withRenotes?: boolean;
                    /** @default false */
                    withReplies?: boolean;
                    /** @default false */
                    localOnly?: boolean;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Note'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'notes___local-timeline': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default false */
                    withFiles?: boolean;
                    /** @default true */
                    withRenotes?: boolean;
                    /** @default false */
                    withReplies?: boolean;
                    /** @default 10 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                    /** @default false */
                    allowPartial?: boolean;
                    sinceDate?: number;
                    untilDate?: number;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Note'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    notes___mentions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default false */
                    following?: boolean;
                    /** @default 10 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                    visibility?: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Note'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    notes___polls___recommendation: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default 10 */
                    limit?: number;
                    /** @default 0 */
                    offset?: number;
                    /** @default false */
                    excludeChannels?: boolean;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Note'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    notes___polls___vote: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    noteId: string;
                    choice: number;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    notes___reactions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    noteId: string;
                    type?: string | null;
                    /** @default 10 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['NoteReaction'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    notes___reactions___create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    noteId: string;
                    reaction: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    notes___reactions___delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    noteId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    notes___renotes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    noteId: string;
                    /** @default 10 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Note'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    notes___replies: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    noteId: string;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                    /** @default 10 */
                    limit?: number;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Note'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    notes___schedule___create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /**
                     * @default public
                     * @enum {string}
                     */
                    visibility?: 'public' | 'home' | 'followers' | 'specified';
                    visibleUserIds?: string[];
                    cw?: string | null;
                    /**
                     * @default null
                     * @enum {string|null}
                     */
                    reactionAcceptance?: null | 'likeOnly' | 'likeOnlyForRemote' | 'nonSensitiveOnly' | 'nonSensitiveOnlyForLocalLikeOnlyForRemote';
                    /** @default false */
                    noExtractMentions?: boolean;
                    /** @default false */
                    noExtractHashtags?: boolean;
                    /** @default false */
                    noExtractEmojis?: boolean;
                    /** Format: misskey:id */
                    replyId?: string | null;
                    /** Format: misskey:id */
                    renoteId?: string | null;
                    text?: string | null;
                    fileIds?: string[];
                    mediaIds?: string[];
                    poll?: {
                        choices: string[];
                        multiple?: boolean;
                        expiresAt?: number | null;
                        expiredAfter?: number | null;
                    } | null;
                    scheduleNote: {
                        scheduledAt?: number;
                    };
                    scheduledDelete?: {
                        deleteAt?: number | null;
                        deleteAfter?: number | null;
                    } | null;
                } | unknown | unknown | unknown | unknown | unknown;
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    notes___schedule___delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    noteId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    notes___schedule___list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                    /** @default 10 */
                    limit?: number;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** Format: misskey:id */
                        id: string;
                        note: {
                            createdAt: string;
                            text?: string;
                            cw?: string | null;
                            fileIds: string[];
                            isNoteInYamiMode?: boolean | null;
                            /** @enum {string} */
                            visibility: 'public' | 'home' | 'followers' | 'specified';
                            localOnly?: boolean | null;
                            visibleUsers: components['schemas']['UserLite'][];
                            user: components['schemas']['User'];
                            /**
                             * @default null
                             * @enum {string|null}
                             */
                            reactionAcceptance: null | 'likeOnly' | 'likeOnlyForRemote' | 'nonSensitiveOnly' | 'nonSensitiveOnlyForLocalLikeOnlyForRemote';
                            isSchedule: boolean;
                        };
                        userId: string;
                        scheduledAt: string;
                    }[];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    notes___search: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    query: string;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                    /** @default 10 */
                    limit?: number;
                    /** @default 0 */
                    offset?: number;
                    /** @description The local host is represented with `.`. */
                    host?: string;
                    /**
                     * Format: misskey:id
                     * @default null
                     */
                    userId?: string | null;
                    /**
                     * Format: misskey:id
                     * @default null
                     */
                    channelId?: string | null;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Note'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'notes___search-by-tag': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': ({
                    tag: string;
                } | {
                    /** @description The outer arrays are chained with OR, the inner arrays are chained with AND. */
                    query: string[][];
                }) & {
                    /** @default null */
                    reply?: boolean | null;
                    /** @default null */
                    renote?: boolean | null;
                    /**
                     * @description Only show notes that have attached files.
                     * @default false
                     */
                    withFiles?: boolean;
                    /** @default null */
                    poll?: boolean | null;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                    /** @default 10 */
                    limit?: number;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Note'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    notes___show: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    noteId: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Note'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'notes___show-partial-bulk': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    noteIds: string[];
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        id: string;
                        reactions: {
                            [key: string]: number;
                        };
                        reactionEmojis: {
                            [key: string]: string;
                        };
                    }[];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    notes___state: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    noteId: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        isFavorited: boolean;
                        isMutedThread: boolean;
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'notes___thread-muting___create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    noteId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'notes___thread-muting___delete': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    noteId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    notes___timeline: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default 10 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                    sinceDate?: number;
                    untilDate?: number;
                    /** @default false */
                    allowPartial?: boolean;
                    /** @default true */
                    includeMyRenotes?: boolean;
                    /** @default true */
                    includeRenotedMyNotes?: boolean;
                    /** @default true */
                    includeLocalRenotes?: boolean;
                    /** @default false */
                    withFiles?: boolean;
                    /** @default true */
                    withRenotes?: boolean;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Note'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    notes___translate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    noteId: string;
                    targetLang: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        sourceLang: string;
                        text: string;
                    };
                };
            };
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    notes___unrenote: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    noteId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'notes___user-list-timeline': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    listId: string;
                    /** @default 10 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                    sinceDate?: number;
                    untilDate?: number;
                    /** @default false */
                    allowPartial?: boolean;
                    /** @default true */
                    includeMyRenotes?: boolean;
                    /** @default true */
                    includeRenotedMyNotes?: boolean;
                    /** @default true */
                    includeLocalRenotes?: boolean;
                    /** @default true */
                    withRenotes?: boolean;
                    /**
                     * @description Only show notes that have attached files.
                     * @default false
                     */
                    withFiles?: boolean;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Note'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'notes___yami-timeline': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default 10 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                    sinceDate?: number;
                    untilDate?: number;
                    /** @default false */
                    allowPartial?: boolean;
                    /** @default true */
                    includeMyRenotes?: boolean;
                    /** @default true */
                    includeRenotedMyNotes?: boolean;
                    /** @default true */
                    includeLocalRenotes?: boolean;
                    /** @default false */
                    withFiles?: boolean;
                    /** @default true */
                    withRenotes?: boolean;
                    /** @default false */
                    localOnly?: boolean;
                    /** @default true */
                    showYamiNonFollowingPublicNotes?: boolean;
                    /** @default true */
                    showYamiFollowingNotes?: boolean;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Note'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    notifications___create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    body: string;
                    header?: string | null;
                    icon?: string | null;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    notifications___flush: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'notifications___mark-all-as-read': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'notifications___test-notification': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'page-push': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    pageId: string;
                    event: string;
                    var?: unknown;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    pages___create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    title: string;
                    name: string;
                    summary?: string | null;
                    content: {
                        [key: string]: unknown;
                    }[];
                    variables: {
                        [key: string]: unknown;
                    }[];
                    script: string;
                    /** Format: misskey:id */
                    eyeCatchingImageId?: string | null;
                    /**
                     * @default sans-serif
                     * @enum {string}
                     */
                    font?: 'serif' | 'sans-serif';
                    /** @default false */
                    alignCenter?: boolean;
                    /** @default false */
                    hideTitleWhenPinned?: boolean;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Page'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    pages___delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    pageId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    pages___featured: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Page'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    pages___like: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    pageId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    pages___show: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    pageId: string;
                } | {
                    name: string;
                    username: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Page'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    pages___unlike: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    pageId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    pages___update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    pageId: string;
                    title?: string;
                    name?: string;
                    summary?: string | null;
                    content?: {
                        [key: string]: unknown;
                    }[];
                    variables?: {
                        [key: string]: unknown;
                    }[];
                    script?: string;
                    /** Format: misskey:id */
                    eyeCatchingImageId?: string | null;
                    /** @enum {string} */
                    font?: 'serif' | 'sans-serif';
                    alignCenter?: boolean;
                    hideTitleWhenPinned?: boolean;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    ping: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        pong: number;
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'pinned-users': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['UserDetailed'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    promo___read: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    noteId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'renote-mute___create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    userId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'renote-mute___delete': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    userId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'renote-mute___list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default 30 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['RenoteMuting'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'request-reset-password': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    username: string;
                    email: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'reset-db': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'reset-password': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    token: string;
                    password: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    retention: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** Format: date-time */
                        createdAt: string;
                        users: number;
                        data: {
                            [key: string]: number;
                        };
                    }[];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'reversi___cancel-match': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    userId?: string | null;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    reversi___games: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default 10 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                    /** @default false */
                    my?: boolean;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ReversiGameLite'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    reversi___invitations: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['UserLite'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    reversi___match: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    userId?: string | null;
                    /** @default false */
                    noIrregularRules?: boolean;
                    /** @default false */
                    multiple?: boolean;
                    /** @default false */
                    accept_only?: boolean;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ReversiGameDetailed'];
                };
            };
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'reversi___show-game': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    gameId: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ReversiGameDetailed'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    reversi___surrender: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    gameId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    reversi___verify: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    gameId: string;
                    crc32: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        desynced: boolean;
                        game?: components['schemas']['ReversiGameDetailed'] | null;
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    roles___add: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    name: string;
                    description: string;
                    color: string | null;
                    iconUrl: string | null;
                    asBadge: boolean;
                    isPublic: boolean;
                    isExplorable: boolean;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    roles___assign: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    roleId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    roles___list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    communityOnly?: boolean;
                    communityPublicOnly?: boolean;
                    ownerOnly?: boolean;
                    assignedOnly?: boolean;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Role'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    roles___notes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    roleId: string;
                    /** @default 10 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                    sinceDate?: number;
                    untilDate?: number;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Note'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    roles___show: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    roleId: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Role'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    roles___unassign: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    roleId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    roles___update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    roleId: string;
                    name: string;
                    description: string;
                    color: string | null;
                    iconUrl: string | null;
                    asBadge: boolean;
                    isPublic: boolean;
                    isExplorable: boolean;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    roles___users: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    roleId: string;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                    /** @default 10 */
                    limit?: number;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** Format: misskey:id */
                        id: string;
                        user: components['schemas']['UserDetailed'];
                    }[];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'server-info': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        machine: string;
                        cpu: {
                            model: string;
                            cores: number;
                        };
                        mem: {
                            total: number;
                        };
                        fs: {
                            total: number;
                            used: number;
                        };
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    stats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        notesCount: number;
                        originalNotesCount: number;
                        usersCount: number;
                        originalUsersCount: number;
                        instances: number;
                        driveUsageLocal: number;
                        driveUsageRemote: number;
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    sw___register: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    endpoint: string;
                    auth: string;
                    publickey: string;
                    /** @default false */
                    sendReadMessage?: boolean;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {string} */
                        state?: 'already-subscribed' | 'subscribed';
                        key: string | null;
                        userId: string;
                        endpoint: string;
                        sendReadMessage: boolean;
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'sw___show-registration': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    endpoint: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        userId: string;
                        endpoint: string;
                        sendReadMessage: boolean;
                    } | null;
                };
            };
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    sw___unregister: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    endpoint: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'sw___update-registration': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    endpoint: string;
                    sendReadMessage?: boolean;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        userId: string;
                        endpoint: string;
                        sendReadMessage: boolean;
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    test: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    required: boolean;
                    string?: string;
                    /** @default hello */
                    default?: string;
                    /** @default hello */
                    nullableDefault?: string | null;
                    /** Format: misskey:id */
                    id?: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** Format: misskey:id */
                        id?: string;
                        required: boolean;
                        string?: string;
                        default?: string;
                        /** @default hello */
                        nullableDefault: string | null;
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    username___available: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    username: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        available: boolean;
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    users: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default 10 */
                    limit?: number;
                    /** @default 0 */
                    offset?: number;
                    /** @enum {string} */
                    sort?: '+follower' | '-follower' | '+createdAt' | '-createdAt' | '+updatedAt' | '-updatedAt';
                    /**
                     * @default all
                     * @enum {string}
                     */
                    state?: 'all' | 'alive';
                    /**
                     * @default local
                     * @enum {string}
                     */
                    origin?: 'combined' | 'local' | 'remote';
                    /**
                     * @description The local host is represented with `null`.
                     * @default null
                     */
                    hostname?: string | null;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['UserDetailed'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    users___achievements: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    userId: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Achievement'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    users___clips: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    userId: string;
                    /** @default 10 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Clip'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'users___featured-notes': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default 10 */
                    limit?: number;
                    /** Format: misskey:id */
                    untilId?: string;
                    /** Format: misskey:id */
                    userId: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Note'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    users___flashs: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    userId: string;
                    /** @default 10 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Flash'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    users___followers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': ({
                    /** Format: misskey:id */
                    userId: string;
                } | {
                    username: string;
                    /** @description The local host is represented with `null`. */
                    host: string | null;
                }) & {
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                    /** @default 10 */
                    limit?: number;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Following'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    users___following: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': ({
                    /** Format: misskey:id */
                    userId: string;
                } | {
                    username: string;
                    /** @description The local host is represented with `null`. */
                    host: string | null;
                }) & {
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                    /** @default 10 */
                    limit?: number;
                    birthday?: string | null;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Following'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    users___gallery___posts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    userId: string;
                    /** @default 10 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['GalleryPost'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'users___get-frequently-replied-users': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    userId: string;
                    /** @default 10 */
                    limit?: number;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        user: components['schemas']['UserDetailed'];
                        weight: number;
                    }[];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    users___lists___create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    name: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['UserList'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'users___lists___create-from-public': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    name: string;
                    /** Format: misskey:id */
                    listId: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['UserList'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    users___lists___delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    listId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    users___lists___favorite: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    listId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'users___lists___get-memberships': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    listId: string;
                    /** @default false */
                    forPublic?: boolean;
                    /** @default 30 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** Format: misskey:id */
                        id: string;
                        /** Format: date-time */
                        createdAt: string;
                        /** Format: misskey:id */
                        userId: string;
                        user: components['schemas']['UserLite'];
                        withReplies: boolean;
                    }[];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    users___lists___list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    userId?: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['UserList'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    users___lists___pull: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    listId: string;
                    /** Format: misskey:id */
                    userId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    users___lists___push: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    listId: string;
                    /** Format: misskey:id */
                    userId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    users___lists___show: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    listId: string;
                    /** @default false */
                    forPublic?: boolean;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['UserList'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    users___lists___unfavorite: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    listId: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    users___lists___update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    listId: string;
                    name?: string;
                    isPublic?: boolean;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['UserList'];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'users___lists___update-membership': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    listId: string;
                    /** Format: misskey:id */
                    userId: string;
                    withReplies?: boolean;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    users___notes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    userId: string;
                    /** @default false */
                    withReplies?: boolean;
                    /** @default true */
                    withRenotes?: boolean;
                    /** @default false */
                    withChannelNotes?: boolean;
                    /** @default 10 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                    sinceDate?: number;
                    untilDate?: number;
                    /** @default false */
                    allowPartial?: boolean;
                    /** @default false */
                    withFiles?: boolean;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Note'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    users___pages: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    userId: string;
                    /** @default 10 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Page'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    users___reactions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    userId: string;
                    /** @default 10 */
                    limit?: number;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                    sinceDate?: number;
                    untilDate?: number;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['NoteReaction'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    users___recommendation: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @default 10 */
                    limit?: number;
                    /** @default 0 */
                    offset?: number;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['UserDetailed'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    users___relation: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    userId: string | string[];
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** Format: id */
                        id: string;
                        isFollowing: boolean;
                        hasPendingFollowRequestFromYou: boolean;
                        hasPendingFollowRequestToYou: boolean;
                        isFollowed: boolean;
                        isBlocking: boolean;
                        isBlocked: boolean;
                        isMuted: boolean;
                        isRenoteMuted: boolean;
                    } | {
                        /** Format: id */
                        id: string;
                        isFollowing: boolean;
                        hasPendingFollowRequestFromYou: boolean;
                        hasPendingFollowRequestToYou: boolean;
                        isFollowed: boolean;
                        isBlocking: boolean;
                        isBlocked: boolean;
                        isMuted: boolean;
                        isRenoteMuted: boolean;
                    }[];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'users___report-abuse': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    userId: string;
                    comment: string;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    users___search: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    query: string;
                    /** @default 0 */
                    offset?: number;
                    /** @default 10 */
                    limit?: number;
                    /**
                     * @default combined
                     * @enum {string}
                     */
                    origin?: 'local' | 'remote' | 'combined';
                    /** @default true */
                    detail?: boolean;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['User'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'users___search-by-username-and-host': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': ({
                    username: string | null;
                } | {
                    host: string | null;
                }) & {
                    /** @default 10 */
                    limit?: number;
                    /** @default true */
                    detail?: boolean;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['User'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    users___show: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': ({
                    /** Format: misskey:id */
                    userId: string;
                } | {
                    userIds: string[];
                } | {
                    username: string;
                }) & {
                    /** @description The local host is represented with `null`. */
                    host?: string | null;
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['UserDetailed'] | components['schemas']['UserDetailed'][];
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    'users___update-memo': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** Format: misskey:id */
                    userId: string;
                    /** @description A personal memo for the target user. If null or empty, delete the memo. */
                    memo: string | null;
                };
            };
        };
        responses: {
            /** @description OK (without any results) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    v2___admin___emoji___list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    query?: {
                        updatedAtFrom?: string;
                        updatedAtTo?: string;
                        name?: string;
                        host?: string;
                        uri?: string;
                        publicUrl?: string;
                        originalUrl?: string;
                        type?: string;
                        aliases?: string;
                        category?: string;
                        license?: string;
                        isSensitive?: boolean;
                        localOnly?: boolean;
                        /**
                         * @default all
                         * @enum {string}
                         */
                        hostType?: 'local' | 'remote' | 'all';
                        roleIds?: string[];
                    } | null;
                    /** Format: misskey:id */
                    sinceId?: string;
                    /** Format: misskey:id */
                    untilId?: string;
                    /** @default 10 */
                    limit?: number;
                    page?: number;
                    /** @default [
                     *       "-id"
                     *     ] */
                    sortKeys?: ('+id' | '-id' | '+updatedAt' | '-updatedAt' | '+name' | '-name' | '+host' | '-host' | '+uri' | '-uri' | '+publicUrl' | '-publicUrl' | '+type' | '-type' | '+aliases' | '-aliases' | '+category' | '-category' | '+license' | '-license' | '+isSensitive' | '-isSensitive' | '+localOnly' | '-localOnly' | '+roleIdsThatCanBeUsedThisEmojiAsReaction' | '-roleIdsThatCanBeUsedThisEmojiAsReaction')[];
                };
            };
        };
        responses: {
            /** @description OK (with results) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        emojis: components['schemas']['EmojiDetailedAdmin'][];
                        count: number;
                        allCount: number;
                        allPages: number;
                    };
                };
            };
            /** @description Client error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description I'm Ai */
            418: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
}

